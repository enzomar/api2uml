swagger: '2.0'
info:
  title: RailKit
  description: >
    ## Overview

    Amadeus RailKit is a REST API that manages the whole flow of rail
    reservations.


    ### Top resources
      * Travel-offer
      * Calendar overview search
      * Itineraries search
      * Travel-offers search
      * Travel-offers day overview search
      * Ancillaries search
      * Cards and passes search
      * Cart
      * Order
      * Document
      * Ticket
      * Financial transaction
      * StationTimetable

    #### Travel-offer
      A travel-offer is a resource bundling two other resources - offers and one itinerary served by these offers. It allows the displaying
      of these two resources in a logical way. When a travel-offers search or day overview search are created, travel-offers will be returned in the response.
      Details of one travel-offer (the details of all the offers and the itinerary it contains) can be requested.
      ##### Offer
      An offer is a cohesive bundle of admissions, accommodations and ancillaries which corresponds to a global sellable solution for specified itinerary and travelers.
      ##### Itinerary
      Itineraries are returned by Journey Planner. An itinerary refers to one of the possible solutions that fulfill the search
      criteria of the performed request. It only applies to one way - either outbound or inbound - and it is composed of segments.
      
    #### Calendar overview search
      A calendar overview search is used to retrieve the best prices per day for a given origin/destination pair on an interval that 
      can go up to 90 days.
      It provides an overview of the lowest price only per each day for the requested period.
      It is important to highlight that only the prices are returned and not the details of the offers, so no booking (reservation) can be performed after using only the price returned by the calendar overview. 
      If no end date is provided, the default result covers 30 days. By default the results will be given 
      per travel class. It is possible however to specify the desired travel class(es) in the input so as to filter 
      the shown results. The request can be made for one or two travelers by providing their birth dates in order to define 
      their type - youth, adult or senior. If no date of birth is provided, the default is one adult. Reduction or corporate cards 
      are not supported.

    #### Itineraries search
      An itineraries search is used in a schedule driven flow. An itinerary will be linked to an offer and when a collection of offers is built, the itineraries are retrieved from Journey
      Planner or built from the information returned directly from the provider.

    #### Travel-offers search
      A travel-offers search is used to shop for admissions or standalone accommodations for a given origin/destination pair and a specific departure (or arrival) 
      time for one or several travelers. Different input options are supported as, for example, journey options in which 
      the traveler can choose the wished number of connections, vehicle type and so on. Also, product options can be provided. 
      Moreover, travelers entitled to reductions can include them in the request. The travel-offers search bundles the criteria and 
      the results corresponding to the criteria in its response. If a traveler is specified the search is created for one adult without
      reductions.

    #### Travel-offers day overview search
      A travel-offers day overview search is used to retrieve only the offers containing the best price per itinerary on a day for a 
      given origin/destination pair and a date.
      An offer returned by a travel offers day overview search can be added to the cart and booked (reserved).
      As it is a fairly generic request, less input criteria are supported in comparison
      to the travel-offers search. For instance, only direct itineraries (no connections) are supported and it is limited to two 
      passengers at maximum (without reductions). A travel class and a flexibility level can also be taken into account and 
      in this case the offers returned would be those containing the best prices per schedule solution and flexibility for
      the travel class chosen. It supports a list of products in input as well.

    #### Ancillaries search
      An ancillaries search is used to shop for applicable ancillaries based on input criteria. A list of applicable ancillaries is returned, insurances and vouchers, for example.

    #### Cards and passes search
      A cards and passes search is used to shop for card and passes based on input criteria. A list of applicable cards and passes is returned.

    #### Cart overview
      A Cart is used for preparing all necessary information to perform a booking. A Cart contains Selected Offers and Travelers. 
      When a cart is checked out, order items corresponding to the cart selected offers are created inside a new or an existing order.

    #### Order overview
      Orders correspond to reservation records (Amadeus PNRs). An Order contains Actors, order items, TicketingOptions, PaymentOptions and 
      PaymentTransactions. An Order is created following a checkout action of Cart, then the Order can be enriched with new cart content or 
      with standalone Ancillaries. An Order contains all reservation details, and can be modified, paid, ticketed, as well as updated 
      by after-sales operations.

    #### Document overview
      Set of information on a file that has been named.

    #### Ticket overview
      The ticket is the proof of representation of the contract of carriage between the contractual carrier and the traveler.

    #### Financial transaction
      A financial transaction is a monetary operation related to a specific order.

    #### StationTimetable overview
      Station Timetables are used to display on websites the equivalent of departure or arrival boards that can be seen in a station.
      It can be used to retrieve all trains incoming from a particular station; or all trains leaving from a particular station.
      Lists can be customized to display only trains leaving from/going to particular stations; changing the date and/or filter out
      trains based on their departure or arrival time.
     
    ### Supported operations
      * Travel-offers
        * Retrieve the details of one travel-offer
      * Offers
        * Retrieve the details of one offer
      * Itineraries
        * Retrieve the details of one itinerary
      * Calendar overview search
        * Create a search by specifying Origin and Destination to receive best prices. Additional options possible
        * Create a search with an outward offerId in input to receive inward best prices
      * Itineraries search
        * Create an itineraries search by specifying a set of criteria
        * Scroll on the itineraries received to get earlier/later itineraries
        * Request real time information when receiving the details of an itinerary
      * StationTimetable request operations
        * Retrieve Departure or Arrival Timetable depending on type requested
      * Travel-offers search
        * Create a search by specifying Origin and Destination and receive computed travel-offers. Additional options possible
        * Scroll on the outward travel-offers - earlier/later
        * Retrieve compatible inward travel-offers
        * Scroll on the compatible inward travel-offers
      * Travel-offers day overview search
        * Create a search by Origin and Destination and receive computed travel-offers. Additional options possible
        * Create a search with an outward offerId in input to receive inward travel-offers
      * Ancillaries search
        * Create an ancillaries search from an order by specifying the orderId to receive associated possible ancillaries
        * Create an ancillaries search and retrieve available ancillaries based on input criteria
      * Cards and passes search
        * Create a cards and passes search and retrieve available cards and passes based on input criteria
      * Cart operations
        * Create a cart with travelers
        * Create a cart with offers
        * Modify traveler information
        * Add offers in cart
        * Add optional accommodations in cart
        * Add optional ancillaries in cart
        * Select accommodation preferences
        * Select ancillary (meal) preferences
        * Remove a selected offer from cart
        * Remove an optional accommodation from cart
        * Remove an optional ancillary from cart
        * Retrieve a cart
        * Retrieve a selected offer or a collection of selected offers
        * Retrieve an admission or a collection of admissions
        * Retrieve an accommodation or a collection of accommodations
        * Retrieve an ancillary or a collection of ancillaries
        * Retrieve an traveler or a collection of travelers
      * Order operations
        * Before payment
          * Create an order
          * Add cart content in an order
          * Add standalone ancillary in an order item
          * Add standalone ancillary in a new order item
          * Add a buyer
          * Modify actor information
          * Cancel an order
          * Cancel an order item or a collection of order items
          * Cancel an admission
          * Cancel a collection of ancillaries
          * Retrieve a collection of ticketing options
          * Select ticketing options
          * Retrieve a payment option or a collection of payment options
          * Select payment options
          * Override ticket time limit
          * Cancel a payment transaction
        * Retrieve an order
        * Retrieve an order item or a collection of order items
        * Retrieve an admission or a collection of admissions
        * Retrieve an accommodation or a collection of accommodations
        * Retrieve an ancillary or a collection of ancillaries
        * Retrieve an actor or a collection of actors
        * Search orders with filtering criteria
        * Create a fee or a collection of fees
        * Cancel a collection of fees
      * Document operations
        * Retrieve a document or a collection of documents
      * Ticket operations
        * Create a ticket or a collection of tickets
        * Retrieve a ticket or a collection of tickets
      * Financial transactions
        * Retrieve a financial transaction or a collection of financial transactions
      
    ### Limitations
      * Selected offers in a cart should apply to all travelers in this cart.

    ### Unsupported operations
      * Retrieving a PNR which is not created through RailKit is not supported.

    ## Response structure

    Every response is contained by an envelope. That is, each response has a
    predictable set of keys with which you can expect to interact:

    ```

    {
        "warnings": [...],
        "errors": [...],
        "data": {...}
    }

    ```

    * Warnings

        Warnings correspond to non blocking issues encountered when processing an operation.

    * Errors

        Errors correspond to functional blocking issues encountered when processing an operation. When at least one message has a level 
        'error' nothing has been processed so no 'data' are returned.

    * Data

        The data key is the meat of the response. It contains all information regarding the resource requested.

    ### Projection

    * Projection is supported only on cart and order messages, these messages
    allow "fields" as query parameter as specified in each message definition.

    * When having key word "fields" in query parameters, only requested keys are
    returned in response.

    * If an inexistent key is used, the key will be ignored.

    * Several keys are seperated by ',', deeper levels are seperated by '.'.

    * If a key inside an array is requested, this key for each element is
    returned.

    ```

    Syntax: GET <path>?fields=<key1,key2>

    Example: GET /carts/{cartId}?fields=id,totalPrice,expirationTime
             GET /orders/{orderId}?fields=id,orderItems.admissions.id
    ```


    ## Standards


    ### Duration

    All periods of time are represented using the standard RFC 3339
    (https://www.ietf.org/rfc/rfc3339.txt).

    ```

    Example: P[n]Y[n]M[n]DT[n]H[n]M[n]S

    ```
  version: v1.0.0
tags:
  - name: Calendar
    description: All Calendar's operations
  - name: Itinerary
    description: All Itinerary's operations
  - name: StationTimetable
    description: All StationTimetable's operations
  - name: Shopping
    description: All Shopping's operations
  - name: Cart
    description: All Cart's operations
  - name: Order
    description: All Order's operations
  - name: Ancillary
    description: All Ancillary's operations
  - name: Card and Pass
    description: All Cards and Passes' operations
  - name: AfterSales
    description: All AfterSales' operations
  - name: FinancialTransactions
    description: All Financial Transction's operations
  - name: Ticket
    description: All Ticket's operations
host: nodeD1.test.api.amadeus.com
basePath: /rail/v1
schemes:
  - https
consumes:
  - application/json
  - application/vnd.amadeus+json
produces:
  - application/json
  - application/vnd.amadeus+json
securityDefinitions:
  apiKeyAuth:
    type: apiKey
    in: header
    name: Authorization
  msgKey:
    type: apiKey
    description: echoed by the SI in responses and should be generated by the Client.
    in: header
    name: Ama-Client-Ref
security:
  - apiKeyAuth: []
  - msgKey: []
paths:
  /ancillaries/search:
    post:
      summary: Create an ancillary request
      description: >-
        This method allows to get the saleable ancillaries by providing a set of
        criteria in input or a reference to the current order and sale on which
        ancillaries can be offered.
      parameters:
        - in: body
          name: postAncillarySearchBody
          description: Input criteria to create the ancillary request.
          required: true
          schema:
            $ref: '#/definitions/AncillarySearchBody'
      tags:
        - Ancillary
      responses:
        '201':
          description: Ancillary request created.
          schema:
            $ref: '#/definitions/AncillarySearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /cards-and-passes/search:
    post:
      summary: Create a cards and passes request
      description: >-
        This method allows to get the saleable cards and passes by providing a
        set of criteria in input.
      parameters:
        - in: body
          name: postCardAndPassSearchBody
          description: Input criteria to create the cards and passes request.
          required: true
          schema:
            $ref: '#/definitions/CardAndPassSearchBody'
      tags:
        - Card and pass
      responses:
        '201':
          description: Cards and passes request created.
          schema:
            $ref: '#/definitions/CardAndPassSearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /carts:
    post:
      summary: Create a cart
      description: >-
        This method allows to create a cart and insert travelers or offers
        information into it. If no request body, an empty cart is created. If
        the request body contains only travelers information, a cart containing
        travelers is created. If the request body contains only offerIds,
        travelers informations are extracted from offers specified by the
        offerIds and automatically added into the new cart.
      parameters:
        - name: postCartsBody
          in: body
          description: Content to be added into the new cart.
          required: false
          schema:
            type: object
            title: postCarts
            minProperties: 0
            maxProperties: 1
            properties:
              travelers:
                type: array
                description: Travelers can be added into the cart without having offers.
                items:
                  $ref: '#/definitions/Traveler'
                minItems: 1
              selection:
                type: object
                title: selection
                minProperties: 1
                maxProperties: 1
                properties:
                  offers:
                    type: array
                    description: >-
                      Group OfferId, accommodationIds, ancillaryIds into an
                      offer of cart. OfferId, accommodationIds, ancillaryIds are
                      obtained from shopping requests. Offers can be added into
                      the cart without having travelers. A new selected-offer in
                      the cart will be created if only standalone ancillaries
                      are requested.
                    items:
                      $ref: '#/definitions/OfferIdOptionalIds'
                    minItems: 1
                  cardAndPassIds:
                    description: >-
                      Create a cart for selected cards and passes. The selection
                      is for all travelers referred under each card or pass of
                      the search result. All cards and passes specified here
                      will be stored under 1 offer in cart.
                    type: array
                    minItems: 1
                    items:
                      type: string
                      format: uuid
      tags:
        - Cart
      responses:
        '201':
          description: Content of a new cart including an identifier and all added content.
          schema:
            $ref: '#/definitions/CartReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}':
    get:
      summary: Retrieve a cart
      description: This method allows to retrieve a cart by specifying its id.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: fields
          in: query
          required: false
          type: string
          pattern: '^(([a-zA-Z]+\.)*[a-zA-Z]+\,)*([a-zA-Z]+\.)*[a-zA-Z]+$'
          description: >-
            Response projection. Only requested fields are returned in response.
            Please see global description Projection section.
      tags:
        - Cart
      responses:
        '200':
          description: Content of a new cart including an identifier and all added content.
          schema:
            $ref: '#/definitions/CartReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/selected-offers':
    post:
      summary: Create a selected offer or a collection of selected offers
      description: >-
        This method allows to add an offer or a collection of offers in an
        existing cart, by specifying its id.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: postCartSelectedOffersBody
          in: body
          description: Offer(s) to be added into the cart.
          required: false
          schema:
            type: array
            description: >-
              Group offerId, accommodationIds, ancillaryIds into an offer of
              cart. OfferId, accommodationIds, ancillaryIds are obtained from
              shopping requests. Offers can be added into the cart without
              having travelers.
            items:
              $ref: '#/definitions/OfferIdOptionalIds'
            minItems: 1
      tags:
        - Cart
      responses:
        '201':
          description: Content of all selected offers.
          schema:
            $ref: '#/definitions/OffersSelectedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    get:
      summary: Retrieve a collection of selected offers
      description: >-
        This method allows to retrieve a collection of selected offers by
        specifying the id of the cart containing them.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: fields
          in: query
          required: false
          type: string
          pattern: '^(([a-zA-Z]+\.)*[a-zA-Z]+\,)*([a-zA-Z]+\.)*[a-zA-Z]+$'
          description: >-
            Response projection. Only requested fields are returned in response.
            Please see global description Projection section.
      tags:
        - Cart
      responses:
        '200':
          description: Content of the collection of selected offers.
          schema:
            $ref: '#/definitions/OffersSelectedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/selected-offers/{selectedOfferId}':
    get:
      summary: Retrieve a selected offer
      description: >-
        This method allows to retrieve a selected offer by specifying its id, as
        well as the id of the cart containing it.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: fields
          in: query
          required: false
          type: string
          pattern: '^(([a-zA-Z]+\.)*[a-zA-Z]+\,)*([a-zA-Z]+\.)*[a-zA-Z]+$'
          description: >-
            Response projection. Only requested fields are returned in response.
            Please see global description Projection section.
      tags:
        - Cart
      responses:
        '200':
          description: Content of a selected offer included in the cart.
          schema:
            $ref: '#/definitions/OfferSelectedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete a selected offer
      description: >-
        This method allows to remove a selected offer from a cart, by specifying
        their ids.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/selected-offers/{selectedOfferId}/accommodations':
    post:
      summary: Create an accommodation or a collection of accommodations
      description: >-
        This method allows to add an optional or a stand-alone accommodation, or
        a collection of both, in specified cart and selected offer.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: postCartAccommodationsBody
          in: body
          description: >-
            A list of accommodation Identifiers representing accommodation(s) to
            be added into the cart.
          required: true
          schema:
            type: array
            items:
              type: string
            minItems: 1
      tags:
        - Cart
      responses:
        '201':
          description: Collection of accommodations added to the cart.
          schema:
            $ref: '#/definitions/AccommodationsReply'
        '404':
          $ref: '#/responses/404'
        '410':
          $ref: '#/responses/410'
    put:
      summary: Update a collection of accommodations
      description: >-
        This method allows to update a collection of accommodations to select
        the accommodation preferences. This action updates either successfully
        all requested items or nothing with an error.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          required: true
          type: string
          enum:
            - PATCH
        - name: patchCartAccommodationsBody
          in: body
          description: >-
            Replaces or adds preferences. If preferences are given twice for the
            same accommodationId or segmentId, the later selection overrides
            entirely the previous selection.
          required: true
          schema:
            type: array
            minItems: 1
            items:
              type: object
              required:
                - segmentId
              properties:
                segmentId:
                  type: string
                  format: uuid
                  description: >-
                    It is used for matching the accommodation preferences
                    selection to the corresponding accommodations.
                commonPreferences:
                  $ref: '#/definitions/AccommodationPreferenceList'
                travelerPreferences:
                  type: array
                  items:
                    type: object
                    allOf:
                      - $ref: '#/definitions/AccommodationPreferenceList'
                      - type: object
                        required:
                          - travelerId
                        properties:
                          travelerId:
                            type: string
                            format: uuid
      tags:
        - Cart
      responses:
        '200':
          description: >-
            Accommodation preferences selections are stored under each
            accommodation.
          schema:
            $ref: '#/definitions/AccommodationsReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        '405':
          $ref: '#/responses/405'
        '410':
          $ref: '#/responses/410'
    get:
      summary: Retrieve a collection of accommodations
      description: >-
        This method allows to retrieve a collection of accommodations and all
        their details by specifying the ids of the cart and the selected offer
        containing them.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '200':
          description: Collection of accommodations in the selected offer.
          schema:
            $ref: '#/definitions/AccommodationsReply'
        '404':
          $ref: '#/responses/404'
        '410':
          $ref: '#/responses/410'
    delete:
      summary: Delete a list of accommodations
      description: >-
        This method allows to remove a list of optional accommodations from
        specified cart and selected offer. If nothing is provided in body, all
        removable accommodations are deleted. Included accommodations can be
        removed only by the deletion of the linked admission. If request body
        contains included accommodation, a warning will be raised. This action
        deletes either successfully all requested optional accommodations or
        nothing with an error.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: deleteCartAccommodationsBody
          in: body
          description: Identifiers of accommodations.
          schema:
            type: array
            items:
              type: string
            minItems: 1
      tags:
        - Cart
      responses:
        '200':
          description: >-
            A warning is raised. Removable accommoations are successfully
            removed.
          schema:
            $ref: '#/definitions/ErrorReply'
        '204':
          description: No content.
        '404':
          $ref: '#/responses/404'
        '405':
          $ref: '#/responses/405'
        '410':
          $ref: '#/responses/410'
  '/carts/{cartId}/selected-offers/{selectedOfferId}/accommodations/{accommodationId}':
    get:
      summary: Retrieve an accommodation
      description: >-
        This method allows to retrieve an accommodation and all its details by
        specifying its id, as well as the ids of the cart and the selected offer
        containing it.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: accommodationId
          in: path
          description: Identifier of the accommodation.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '200':
          description: The detail of the requested accommodation in the selected offer.
          schema:
            $ref: '#/definitions/AccommodationReply'
        '404':
          $ref: '#/responses/404'
        '410':
          $ref: '#/responses/410'
    put:
      summary: Update an accommodation
      description: >-
        This method allows to update an accommodation to select the
        accommodation preferences.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: accommodationId
          in: path
          description: Identifier of the accommodation.
          required: true
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          required: true
          type: string
          enum:
            - PATCH
        - name: patchCartAccommodationBody
          in: body
          description: >-
            Replaces or adds preferences. If preferences are given twice for the
            same accommodation, the later selection overrides entirely the
            previous selection.
          required: true
          schema:
            type: object
            title: patchAccommodationBody
            properties:
              selectedPreferences:
                type: array
                items:
                  $ref: '#/definitions/AccommodationPreferencesSelection'
      tags:
        - Cart
      responses:
        '200':
          description: >-
            Accommodation preferences selection is stored under the
            accommodation.
          schema:
            $ref: '#/definitions/AccommodationReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        '405':
          $ref: '#/responses/405'
        '410':
          $ref: '#/responses/410'
    delete:
      summary: Delete an accommodation
      description: >-
        This method allows to remove an optional or stand-alone accommodation
        from specified cart and selected offer. Included accommodations are
        removed by the deletion of the linked admission.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: accommodationId
          in: path
          description: Identifier of the accommodation.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '204':
          description: No Content.
        '404':
          $ref: '#/responses/404'
        '410':
          $ref: '#/responses/410'
  '/carts/{cartId}/selected-offers/{selectedOfferId}/admissions':
    get:
      summary: Retrieve a collection of admissions
      description: >-
        This method allows to retrieve a collection of admissions and all their
        details by specifying their ids, as well as the ids of the cart and the
        selected offer containing them.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the  selected offer.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '200':
          description: Collection of admissions included in the cart.
          schema:
            $ref: '#/definitions/AdmissionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/selected-offers/{selectedOfferId}/admissions/{admissionId}':
    get:
      summary: Retrieve an admission
      description: >-
        This method allows to retrieve an admission and all its details by
        specifying its id, as well as the ids of the cart and the selected offer
        containing it.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: admissionId
          in: path
          description: Identifier of the admission.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '200':
          description: Admission included in the cart.
          schema:
            $ref: '#/definitions/AdmissionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/selected-offers/{selectedOfferId}/ancillaries':
    post:
      summary: Create an ancillary or a collection of ancillaries
      description: >-
        This method allows to add optional ancillary(ies) into specified cart
        and selected offer.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: postCartAncillariesBody
          in: body
          description: >-
            A list of ancillary identifiers representing ancillary(ies) to be
            added into the cart.
          required: true
          schema:
            type: array
            minItems: 1
            items:
              type: object
              title: cartAncillaryBody
              required:
                - ancillaryId
              properties:
                ancillaryId:
                  type: string
                  format: uuid
                quantity:
                  type: integer
                  description: Quantity per requested traveler.
                  minimum: 0
                travelerIds:
                  type: array
                  description: >-
                    A list of travelers on which the ancillary should be
                    applied.
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: string
                    format: uuid
      tags:
        - Cart
      responses:
        '201':
          description: Collection of ancillaries added to the cart.
          schema:
            $ref: '#/definitions/AncillariesSelectedReply'
        '404':
          description: Selected Offer ID or Cart ID doesn't exist.
          schema:
            $ref: '#/definitions/ErrorReply'
        '410':
          description: Selected Offer ID or Cart ID already expired.
          schema:
            $ref: '#/definitions/ErrorReply'
    put:
      summary: Update a collection of ancillaries
      description: >-
        This method allows to update a collection of ancillaries to select the
        ancillary preference. This action updates either successfully all
        requested items or nothing with an error.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          required: true
          type: string
          enum:
            - PATCH
        - name: patchCartAncillariesBody
          in: body
          description: Replace or add preferences.
          required: true
          schema:
            type: array
            minItems: 1
            items:
              type: object
              title: patchAncillary
              required:
                - id
                - selectedPreferences
              properties:
                id:
                  type: string
                  format: uuid
                selectedPreferences:
                  type: array
                  items:
                    $ref: '#/definitions/AncillaryPreferenceSelection'
      tags:
        - Cart
      responses:
        '200':
          description: Ancillary preference selections are stored under each ancillary.
          schema:
            $ref: '#/definitions/AncillariesSelectedReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        '405':
          $ref: '#/responses/405'
        '410':
          $ref: '#/responses/410'
    get:
      summary: Retrieve a collection of ancillaries
      description: >-
        This method allows to retrieve a collection of ancillaries and all their
        details by specifying the ids of the cart and the selected offer
        containing them.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '200':
          description: Collection of ancillaries included in the cart.
          schema:
            $ref: '#/definitions/AncillariesSelectedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete a list of ancillaries
      description: >-
        This method allows to remove a list of optional or stand-alone
        ancillaries from specified cart and selected offer. Included ancillaries
        can not be removed.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: deleteCartAncillariesBody
          in: body
          description: Identifiers of ancillaries.
          schema:
            type: array
            minItems: 1
            items:
              type: string
              format: uuid
      tags:
        - Cart
      responses:
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/selected-offers/{selectedOfferId}/ancillaries/{ancillaryId}':
    get:
      summary: Retrieve an ancillary
      description: >-
        This method allows to retrieve an ancillary and all its details by
        specifying its id, as well as the ids of the cart and the selected offer
        containing it.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: ancillaryId
          in: path
          description: Identifier of the ancillary.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '200':
          description: Ancillary included in the cart.
          schema:
            $ref: '#/definitions/AncillarySelectedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete an ancillary
      description: >-
        This method allows to remove an optional or stand-alone ancillary from
        specified cart and selected offer. Included ancillaries are removed by
        the deletion of the linked admission or accommodation.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: selectedOfferId
          in: path
          description: Identifier of the selected offer.
          required: true
          type: string
          format: uuid
        - name: ancillaryId
          in: path
          description: Identifier of the ancillary.
          required: true
          type: string
          format: uuid
      tags:
        - Cart
      responses:
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/travelers':
    get:
      summary: Retrieve a collection of travelers
      description: >-
        This method allows to retrieve a collection of travelers by specifying
        the id of the cart containing them.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: fields
          in: query
          required: false
          type: string
          pattern: '^(([a-zA-Z]+\.)*[a-zA-Z]+\,)*([a-zA-Z]+\.)*[a-zA-Z]+$'
          description: >-
            Response projection. Only requested fields are returned in response.
            Please see global description Projection section.
      tags:
        - Cart
      responses:
        '200':
          description: Collection of travelers included in the cart.
          schema:
            $ref: '#/definitions/TravelersReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/carts/{cartId}/travelers/{travelerId}':
    get:
      summary: Retrieve a traveler
      description: >-
        This method allows to retrieve a traveler and all its details by
        specifying its id, as well as the id of the cart containing it.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart.
          required: true
          type: string
          format: uuid
        - name: travelerId
          in: path
          description: Identifier of the traveler.
          required: true
          type: string
          format: uuid
        - name: fields
          in: query
          required: false
          type: string
          pattern: '^(([a-zA-Z]+\.)*[a-zA-Z]+\,)*([a-zA-Z]+\.)*[a-zA-Z]+$'
          description: >-
            Response projection. Only requested fields are returned in response.
            Please see global description Projection section.
      tags:
        - Cart
      responses:
        '200':
          description: Traveler included in the cart.
          schema:
            $ref: '#/definitions/TravelerReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    put:
      summary: Update a traveler
      description: >-
        This method allows to modify the information of a traveler by specifying
        its id and providing data to update.
      parameters:
        - name: cartId
          in: path
          description: Identifier of the cart to be passed in path.
          required: true
          type: string
          format: uuid
        - name: travelerId
          in: path
          description: Identifier of the traveler to be passed in path.
          required: true
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
        - name: patchCartTravelerBody
          in: body
          description: Replace or add traveler information.
          required: true
          schema:
            $ref: '#/definitions/Traveler'
      tags:
        - Cart
      responses:
        '200':
          description: Traveler included in the cart.
          schema:
            $ref: '#/definitions/TravelerReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /documents:
    get:
      summary: Retrieve a collection of documents
      description: This method allows to search for a collection of documents.
      parameters:
        - name: documentId
          in: query
          type: string
          format: uuid
        - name: orderId
          in: query
          type: string
          format: uuid
        - name: groupReference
          in: query
          type: string
          format: uuid
        - name: documentMedia
          in: query
          type: string
        - name: active
          in: query
          description: 'Describes the validity of the document, i.e. if it is active or not.'
          type: boolean
          default: true
        - name: distributorCode
          in: query
          type: string
      tags:
        - Ticket
      responses:
        '200':
          description: Content of the requested collection of documents.
          schema:
            $ref: '#/definitions/DocumentsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/documents/{documentId}':
    get:
      summary: Retrieve a document
      description: This method allows to retrieve a document by specifying its id.
      parameters:
        - name: documentId
          in: path
          required: true
          type: string
          format: uuid
        - name: distributorCode
          in: query
          required: false
          type: string
      tags:
        - Ticket
      responses:
        '200':
          description: Content of the requested document.
          schema:
            $ref: '#/definitions/DocumentReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /exchange-tickets:
    post:
      summary: Create a ticket or a collection of tickets in exchange
      description: >-
        This method allows to create a ticket or a collection of tickets in
        exchange in the order.
      parameters:
        - name: orderId
          in: query
          required: true
          type: string
          format: uuid
        - name: postExchangeTicketsBody
          in: body
          required: false
          schema:
            description: >-
              This section is to be left empty when performing a retry on
              ticketing operation.
            type: object
            title: postExchangeTickets
            properties:
              pspOptions:
                $ref: '#/definitions/PspOptions'
              methodOfPayment:
                description: >-
                  The method of payment can only be specified in case of refund
                  to a bank account.
                type: object
                title: methodOfPayment
                properties:
                  bankAccount:
                    $ref: '#/definitions/Account'
      tags:
        - AfterSales
      responses:
        '202':
          description: Request accepted.
          schema:
            $ref: '#/definitions/PaymentTransactionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /exchange-travel-offers/search:
    post:
      summary: Create a search for exchange travel offers
      description: >-
        This method allows to create a search for exchange travel offers by
        specifying a set of criteria.
      parameters:
        - in: body
          name: postExchangeSearchBody
          description: Input for the search creation.
          required: true
          schema:
            $ref: '#/definitions/ExchangeTravelSearchBody'
      tags:
        - AfterSales
      responses:
        '201':
          description: Search for exchange travel offers created.
          schema:
            $ref: '#/definitions/ExchangeTravelSearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/exchange-travel-offers/search/{searchId}':
    get:
      summary: Retrieve an exchange travel search
      description: >-
        This method allows to retrieve a search with its exchange travel offers
        by specifying its id. This method allows the scrolling to retrieve
        earlier/later exchange travel offers for the same search. In addition,
        compatible return exchange travel offers can be retrieved.
      parameters:
        - name: searchId
          in: path
          description: Id of the search.
          required: true
          type: string
          format: uuid
        - name: scrollToken
          in: query
          description: Token to scroll and fetch earlier/later travel offers.
          type: string
          required: false
        - name: offerId
          in: query
          description: 'If provided, compatible return travel offers will be returned.'
          type: string
          format: uuid
          required: false
      tags:
        - AfterSales
      responses:
        '200':
          description: Search content.
          schema:
            $ref: '#/definitions/ExchangeTravelSearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/exchange-travel-offers/{travelOfferId}':
    get:
      summary: Retrieve an exchange travel offer
      description: >-
        This method allows to retrieve an exchange travel offer containing the
        details of an itinerary and its related exchange offers.
      parameters:
        - name: travelOfferId
          in: path
          description: Identifier of the exchange travel offer.
          required: true
          type: string
          format: uuid
        - name: realTimeInfo
          in: query
          description: To request real time information. By default not returned.
          type: boolean
          default: false
      tags:
        - AfterSales
      responses:
        '200':
          description: Content of an exchange travel offer.
          schema:
            $ref: '#/definitions/ExchangeTravelOfferReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /external-orders:
    get:
      summary: Retrieve external orders
      description: This method allows a customer to retrieve external orders.
      parameters:
        - name: owner
          in: query
          description: >-
            The entity that owns the order, usually a provider. Code (codelist
            CRC) for the carrier code.
          type: string
          required: true
        - name: externalBookingReference
          in: query
          description: The identifier of the record in the external system.
          type: string
          required: true
      tags:
        - External Orders
      responses:
        '200':
          description: External Order
          schema:
            $ref: '#/definitions/OrderReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /financial-transactions:
    get:
      summary: Retrieve a collection of financial transaction
      description: >-
        Retrieves all the financial transactions for a given order. At least one
        parameter must be provided.
      parameters:
        - in: query
          name: orderId
          description: Input order identifer.
          type: string
      tags:
        - FinancialTransactions
      responses:
        '201':
          description: Financial transactions are returned.
          schema:
            $ref: '#/definitions/FinancialTransactionsReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    put:
      summary: Update a financial transaction
      description: >-
        This method allows to update a financial transaction in status
        "PENDING".
      parameters:
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
        - name: patchFinancialTransactionBody
          in: body
          required: true
          description: >-
            Update FinancialTransaction with external payment data and new
            status.
          schema:
            $ref: '#/definitions/FinancialTransaction'
      tags:
        - FinancialTransactions
      responses:
        '200':
          description: Updated financial transaction is returned.
          schema:
            $ref: '#/definitions/FinancialTransactionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/financial-transactions/{financialTransactionId}':
    get:
      summary: Retrieve a financial transaction
      description: Retrieves a financial transaction.
      parameters:
        - in: path
          name: financialTransactionId
          required: true
          type: string
          format: uuid
      tags:
        - FinancialTransactions
      responses:
        '201':
          description: Financial transaction is returned.
          schema:
            $ref: '#/definitions/FinancialTransactionsReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/itineraries/{itineraryId}':
    get:
      summary: Retrieve the detail of one itinerary
      description: >-
        This method allows to retrieve the details of one itinerary by
        specifying its id. In addition, real time information can be requested.
      parameters:
        - name: itineraryId
          in: path
          description: Identification of the itinerary.
          required: true
          type: string
          format: uuid
        - name: realTimeInfo
          in: query
          description: To request real time information. By default not returned.
          type: boolean
          default: false
      tags:
        - Itinerary
      responses:
        '200':
          description: Itinerary details.
          schema:
            $ref: '#/definitions/ItineraryReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
  /itineraries/search:
    post:
      summary: Create an itinerary search
      description: >-
        This method allows to create an itinerary search by specifying a set of
        itinerary criteria.
      parameters:
        - in: body
          name: postItinerarySearchBody
          description: Input criteria to search for itineraries.
          required: true
          schema:
            $ref: '#/definitions/ItinerarySearchBody'
      tags:
        - Itinerary
      responses:
        '201':
          description: Itinerary request created.
          schema:
            $ref: '#/definitions/ItinerarySearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/itineraries/search/{searchId}':
    get:
      summary: Retrieve an itineraries search
      description: >-
        This method allows to retrieve an itinerary search to scroll on its
        itineraries.
      parameters:
        - name: searchId
          in: path
          description: Identification of the itinerary search.
          required: true
          type: string
          format: uuid
        - name: scrollToken
          in: query
          type: string
          required: true
          format: uuid
      tags:
        - Itinerary
      responses:
        '200':
          description: Itinerary details.
          schema:
            $ref: '#/definitions/ItinerarySearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
  '/offers/{offerId}':
    get:
      summary: Retrieve an offer
      description: >-
        This method allows to retrieve the details of an offer by specifying its
        id.
      parameters:
        - name: offerId
          in: path
          description: Id of the offer to retrieve.
          required: true
          type: string
          format: uuid
      tags:
        - Shopping
      responses:
        '200':
          description: 'An offer resource, with detailed info.'
          schema:
            $ref: '#/definitions/OfferReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/exchange-selection':
    post:
      summary: >-
        Create an exchange selection with an order item or a collection of
        exchange order items selected as part of an exchange cart
      description: >-
        This method allows to add the content of an exchange cart in an existing
        order, by specifying the orderId and the exchange CartId.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: postExchangeSelectionBody
          in: body
          required: true
          schema:
            type: object
            title: postExchangeSelectionBody
            properties:
              cartId:
                type: string
                format: uuid
      tags:
        - Order
      responses:
        '201':
          description: An exchange selection is successfully created under requested order.
          schema:
            $ref: '#/definitions/ExchangeSelectionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/exchange-selection/{exchangeSelectionId}':
    get:
      summary: Retrieve an exchange selection
      description: >-
        This method allows to retrieve an exchange selection by specifying its
        id, as well as the id of the order containing it.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: exchangeSelectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: partialResponseFields
          in: query
          type: array
          items:
            type: string
      tags:
        - Order
      responses:
        '200':
          description: ExchangeSale with the requested id under this orderId.
          schema:
            required:
              - data
            type: object
            title: getExchangeSelectionData
            allOf:
              - $ref: '#/definitions/CommonReply'
              - type: object
                title: getEchangeSelection
                properties:
                  data:
                    $ref: '#/definitions/ExchangeSelection'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete an exchange selection
      description: >-
        This method allows to remove an exchange selection from an order, by
        specifying its id.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: exchangeSelectionId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/exchange-selection/{exchangeSelectionId}/fee':
    post:
      summary: Create a fee in an existing exchange selection
      description: >-
        This method allows to add one fee in an existing exchange selection, by
        specifying the orderId.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: exchangeSelectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: fee
          in: body
          description: Input for the fee creation.
          required: true
          schema:
            $ref: '#/definitions/Fee'
      tags:
        - Order
      responses:
        '201':
          description: An exchange selection is successfully updated with the fee.
          schema:
            $ref: '#/definitions/ExchangeSelectionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete the exchange selection fee
      description: This method allows to remove the fee from the exchange selection.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: exchangeSelectionId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '201':
          description: An exchange selection is successfully updated with the fee removed.
          schema:
            $ref: '#/definitions/ExchangeSelectionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/fees':
    post:
      summary: Create a fee or a collection of fee in an existing order
      description: >-
        This method allows to add one or multiple fees in an existing order, by
        specifying the orderId.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: fee
          in: body
          description: Fee creation
          required: true
          schema:
            type: array
            items:
              title: fee
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  pattern: '^[a-zA-Z0-9_]{1,12}$'
                amount:
                  $ref: '#/definitions/Money'
      tags:
        - Order
      responses:
        '201':
          description: A fee is successfully created under requested order.
          schema:
            $ref: '#/definitions/FeesReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete a collection of fees
      description: This method allows to remove a collection of fees from specified order.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: feeIds
          in: body
          description: Identifier of the fees.
          required: true
          schema:
            description: List of fee ids to be deleted.
            type: array
            items:
              type: string
              format: uuid
      tags:
        - Order
      responses:
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/ticketing-options':
    put:
      summary: Update a collection of ticketing options
      description: >-
        This method allows to select a collection of ticketing options for all
        order items of an order.
      parameters:
        - name: orderId
          in: path
          required: true
          description: Identifier of the order to be passed in path.
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
        - name: patchTicketingOptionsBody
          in: body
          required: true
          description: Select ticketing options.
          schema:
            properties:
              ticketingOptions:
                type: array
                items:
                  $ref: '#/definitions/TicketingOptions'
      tags:
        - Order
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/TicketingOptionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    get:
      summary: Retrieve a collection of ticketing options
      description: >-
        This method allows to retrieve a collection of ticketing options of an
        order, by specifying the order id.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Ticketing options.
          schema:
            $ref: '#/definitions/TicketingOptionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/recipient-emails':
    put:
      summary: Update the recipient emails
      description: >-
        This method allows to update the recipient emails and language of
        confimation email. The language used for email confirmation is the one
        used as well to generate tickets.
      parameters:
        - name: orderId
          in: path
          required: true
          description: Identifier of the order to be passed in path.
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
        - name: patchRecipientEmailsBody
          in: body
          required: true
          description: Select recipient emails.
          schema:
            $ref: '#/definitions/RecipientEmails'
      tags:
        - Order
      responses:
        '200':
          description: Updated recipient emails are returned.
          schema:
            $ref: '#/definitions/RecipientEmailsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    get:
      summary: Get the recipient emails
      description: >-
        This method allows to retrieve the recipient emails of an order, by
        specifying the order id.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Recipient Emails.
          schema:
            $ref: '#/definitions/RecipientEmailsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items':
    post:
      summary: Create stand-alone ancillaries in an existing order
      description: This method allows to add an order item in an existing order.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: postOrderItemsBody
          in: body
          required: true
          schema:
            type: object
            title: postOrderItemsBody
            properties:
              standaloneAncillaries:
                type: object
                title: standaloneAncillaries
                required:
                  - ancillaries
                properties:
                  groupReference:
                    type: string
                  ancillaries:
                    type: array
                    items:
                      $ref: '#/definitions/AncillaryIdRequest'
                    minItems: 1
      tags:
        - Order
      responses:
        '201':
          description: Order items successfully booked.
          schema:
            $ref: '#/definitions/OrderItemsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    get:
      summary: Retrieve a collection of order items
      description: >-
        This method allows to retrieve a collection of order items by specifying
        the id of the order containing them.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: groupReference
          in: query
          required: false
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Collection of order items under this order id.
          schema:
            $ref: '#/definitions/OrderItemsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete a list of order items
      description: >-
        This method allows to remove a list of order items from an order, by
        specifying their ids. If nothing is provided in body, all removable
        order items are deleted.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: deleteOrderItemsBody
          in: body
          description: Identifiers of order items.
          schema:
            type: array
            minItems: 1
            uniqueItems: true
            items:
              type: string
              format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Order is partially deleted.
          schema:
            type: object
            properties:
              itemIds:
                description: >-
                  Id of the orderItem(s) which could not be deleted, or id of
                  the item(s) i.e admissions, accommodations, ... in case of
                  orderItem(s) partially deleted.
                type: array
                uniqueItems: true
                items:
                  $ref: '#/definitions/Idhref'
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items/{orderItemId}':
    get:
      summary: Retrieve an order item
      description: >-
        This method allows to retrieve an order item by specifying its id, as
        well as the id of the order containing it.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          required: true
          type: string
          format: uuid
        - name: realTimeInfo
          in: query
          description: >-
            To request real time information in itinerary. By default not
            returned.
          type: boolean
          default: false
      tags:
        - Order
      responses:
        '200':
          description: Order item with the specified order item id.
          schema:
            $ref: '#/definitions/OrderItemReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete an order item
      description: >-
        This method allows to remove an order item from an order, by specifying
        their ids.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: OrderItem is partially deleted.
          schema:
            type: object
            properties:
              itemIds:
                description: >-
                  Id of the item(s) which could not be deleted, i.e admissions,
                  accommodations, etc.
                type: array
                uniqueItems: true
                items:
                  $ref: '#/definitions/Idhref'
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items/{orderItemId}/accommodations':
    get:
      summary: Retrieve a collection of accommodations
      description: >-
        This method allows to retrieve a collection of accommodations and all
        their details by specifying the ids of the order and the order item
        containing them.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Collection of accommodations.
          schema:
            $ref: '#/definitions/AccommodationsBookedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items/{orderItemId}/accommodations/{accommodationId}':
    get:
      summary: Retrieve an accommodation
      description: >-
        This method allows to retrieve an accommodation and all its details by
        specifying its id, as well as the ids of the order and the order item
        containing it.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          required: true
          type: string
          format: uuid
        - name: accommodationId
          in: path
          required: true
          type: string
          format: uuid
        - name: partialResponseFields
          in: query
          type: array
          items:
            type: string
      tags:
        - Order
      responses:
        '200':
          description: Content of an accommodation.
          schema:
            $ref: '#/definitions/AccommodationBookedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items/{orderItemId}/ancillaries/{ancillaryId}':
    get:
      summary: Retrieve an ancillary
      description: >-
        This method allows to retrieve an ancillary and all its details by
        specifying its id, as well as the ids of the order and the order item
        containing it.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          description: Identifier of the order item.
          required: true
          type: string
          format: uuid
        - name: ancillaryId
          in: path
          description: Identifier of the ancillary.
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Ancillary included in the order.
          schema:
            $ref: '#/definitions/AncillaryBookedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items/{orderItemId}/ancillaries':
    post:
      summary: Create an ancillary or a collection of ancillaries
      description: >-
        This method allows to add requested standalone ancillaries into an
        existing order item, by specifying ancillaries ids and traveler ids.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          description: Identifier of the order item.
          required: true
          type: string
          format: uuid
        - name: postOrderAncillariesBody
          in: body
          description: >-
            Ancillary(ies) to be added into the existing order item, represented
            by their Identifiers.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/AncillaryIdRequest'
            minItems: 1
      tags:
        - Order
      responses:
        '201':
          description: Ancillary successfully added to the order.
          schema:
            $ref: '#/definitions/AncillariesBookedReply'
        '404':
          description: Order Item ID or Cart ID doesn't exist.
          schema:
            $ref: '#/definitions/ErrorReply'
        '410':
          description: Order Item ID or Cart ID already expired.
          schema:
            $ref: '#/definitions/ErrorReply'
    get:
      summary: Retrieve a collection of ancillaries
      description: >-
        This method allows to retrieve a collection of ancillaries and all their
        details by specifying the ids of the order and the order item containing
        them.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          description: Identifier of the order item.
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Ancillary included in the order.
          schema:
            $ref: '#/definitions/AncillariesBookedReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Remove a list of ancillaries
      description: >-
        This method allows to remove a list of stand-alone ancillaries from
        specified order and order item. If nothing is provided in body, all
        removable stand-alone ancillaries are deleted.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          description: Identifier of the order item.
          required: true
          type: string
          format: uuid
        - name: deleteOrderAncillariesBody
          in: body
          description: Identifiers of ancillaries.
          schema:
            type: array
            items:
              type: string
              format: uuid
            minItems: 1
      tags:
        - Order
      responses:
        '204':
          description: No content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        '405':
          $ref: '#/responses/405'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items/{orderItemId}/admissions/{admissionId}':
    get:
      summary: Retrieve an admission
      description: >-
        This method allows to retrieve an admission and all its details by
        specifying its id, as well as the ids of the order and the order item
        containing it.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          description: Identifier of the order item.
          required: true
          type: string
          format: uuid
        - name: admissionId
          in: path
          description: Identifier of the admission.
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Admission included in the order item.
          schema:
            $ref: '#/definitions/AdmissionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete an admission
      description: >-
        This method allows to remove an admission from specified order and order
        item.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          description: Identifier of the order item.
          required: true
          type: string
          format: uuid
        - name: admissionId
          in: path
          description: Identifier of the admission.
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/order-items/{orderItemId}/admissions':
    get:
      summary: Retrieve a collection of admissions
      description: >-
        This method allows to retrieve a collection of admissions and all their
        details by specifying their ids, as well as the ids of the order and the
        order item containing them.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order.
          required: true
          type: string
          format: uuid
        - name: orderItemId
          in: path
          description: Identifier of the order item.
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Collection of admissions included in the order item.
          schema:
            $ref: '#/definitions/AdmissionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/payment-transactions':
    delete:
      summary: Delete a payment transaction
      description: >-
        This operation allows to revert a payment transaction by specifying its
        id.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/payment-options/{paymentOptionId}':
    get:
      summary: Retrieve a payment option
      description: This operation allows to retrieve a payment option by specifying its id.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: paymentOptionId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Payment option content.
          schema:
            $ref: '#/definitions/PaymentOptionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/payment-options':
    get:
      summary: Retrieve a collection of payment options
      description: >-
        This operation allows to retrieve all payment options of an order by
        specifying its id.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Payment option content.
          schema:
            $ref: '#/definitions/PaymentOptionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    put:
      summary: Update a collection of payment options
      description: >-
        This operation allows to update a collection of payment options. Payment
        options can be selected.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: patchPaymentOptionsBody
          in: body
          required: true
          description: Update payment option.
          schema:
            properties:
              paymentOptions:
                type: array
                maxItems: 2
                items:
                  $ref: '#/definitions/PaymentOption'
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
      tags:
        - Order
      responses:
        '200':
          description: Payment options content.
          schema:
            $ref: '#/definitions/PaymentOptionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/actors/{actorId}':
    get:
      summary: Retrieve an actor
      description: >-
        This method allows to retrieve an actor and all related information by
        specifying its id, as well as the id of the order containing it.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: actorId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Actor included in the order.
          schema:
            $ref: '#/definitions/ActorReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/actors':
    post:
      summary: Create an actor
      description: >-
        This method allows to add an actor or a collection of actors in an
        existing order, by specifying its or their id(s).
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: postActorsBody
          in: body
          description: >-
            Actors to be added into the order. The actor's role must be BUYER or
            PAYER.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Actor'
            minItems: 1
      tags:
        - Order
      responses:
        '200':
          description: Actor included in the order.
          schema:
            $ref: '#/definitions/ActorsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    put:
      summary: Update a collection of actors
      description: >-
        This method allows to modify information of actors. Reductions and
        loyaltyCards cannot be updated.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order to be passed in path.
          required: true
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
        - name: patchActorsBody
          in: body
          description: Replace or add actor information.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Actor'
            minItems: 1
      tags:
        - Order
      responses:
        '200':
          description: Actors in the order.
          schema:
            $ref: '#/definitions/ActorsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    get:
      summary: Retrieve a collection of actors
      description: >-
        This method allows to retrieve a collection of actors by specifying the
        id of the order containing them.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Actors included in the order.
          schema:
            $ref: '#/definitions/ActorsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /orders:
    post:
      summary: Create an order
      description: >-
        This method allows following operations - Create an order by booking a
        set of offers for some travelers, or by booking the content of a cart,
        by specifying its id. - Claim an external order already retrieved. -
        Create an order containing standalone fees.
      parameters:
        - name: postOrdersBody
          in: body
          description: Order to be created.
          required: true
          schema:
            type: object
            title: postOrdersBody
            properties:
              source:
                type: object
                minProperties: 1
                maxProperties: 1
                title: source
                properties:
                  externalOrder:
                    description: This object is used to claim an external order.
                    type: object
                    title: externalOrder
                    required:
                      - externalBookingReference
                      - owner
                    properties:
                      externalBookingReference:
                        type: string
                      owner:
                        type: string
                  cartId:
                    description: This field is used to book the content of a cart.
                    type: string
                    format: uuid
                  fees:
                    description: Create a new order containing standalone fees.
                    type: array
                    items:
                      title: fee
                      type: object
                      required:
                        - code
                      properties:
                        code:
                          type: string
                          pattern: '^[a-zA-Z0-9_]{1,12}$'
                        amount:
                          $ref: '#/definitions/Money'
              country:
                description: >-
                  Customer country code (format ISO 3166-1
                  https://www.iso.org/iso-3166-country-codes.html).
                type: string
                minLength: 2
                maxLength: 2
                pattern: '^[a-zA-Z]{2}$'
                example: BE
      tags:
        - Order
      responses:
        '201':
          description: Order created.
          schema:
            $ref: '#/definitions/OrderReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    get:
      summary: Filtering orders
      description: This method allows to retrieve an order with pnrRecordLocator.
      parameters:
        - name: pnrRecordLocator
          in: query
          description: Matching path "order.pnrRecordLocator".
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
          pattern: '^(([a-zA-Z]+\.)*[a-zA-Z]+\,)*([a-zA-Z]+\.)*[a-zA-Z]+$'
          description: >-
            Response projection. Only requested fields are returned in response.
            Please see global description Projection section.
        - name: realTimeInfo
          in: query
          description: >-
            To request real time information in itinerary. By default not
            returned.
          type: boolean
          default: false
      responses:
        '200':
          description: Order is returned.
          schema:
            $ref: '#/definitions/OrderReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}':
    get:
      summary: Retrieve an order
      description: This method allows to retrieve an order by specifying its id.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: fields
          in: query
          required: false
          type: string
          pattern: '^(([a-zA-Z]+\.)*[a-zA-Z]+\,)*([a-zA-Z]+\.)*[a-zA-Z]+$'
          description: >-
            Response projection. Only requested fields are returned in response.
            Please see global description Projection section.
        - name: realTimeInfo
          in: query
          description: >-
            To request real time information in itinerary. By default not
            returned.
          type: boolean
          default: false
        - name: include
          in: query
          description: >-
            To include resources in the included element. Multiple resources can
            be requested, separated by a comma.
          type: string
      tags:
        - Order
      responses:
        '200':
          description: Order content.
          schema:
            $ref: '#/definitions/OrderReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    put:
      summary: Update an order
      description: >-
        This method allows to add the content of a cart or an external order in
        an existing order. This method allows also to add or replace customer
        remark inside order.
      parameters:
        - name: orderId
          in: path
          description: Identifier of the order to be passed in path.
          required: true
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
        - name: patchOrderBody
          in: body
          description: Modifications.
          required: true
          schema:
            type: object
            title: patchOrderBody
            maxProperties: 1
            properties:
              cartId:
                type: string
                format: uuid
                description: >-
                  This is used for adding content of a cart into an existing
                  order.
              manageRemarksAndReferences:
                type: object
                title: manageRemarksAndReferences
                properties:
                  references:
                    type: array
                    description: >-
                      This is used for storing customer references. Some
                      predifined keys can be used for indexing and search. If an
                      existing key is used, the value will be overridden.
                    uniqueItems: true
                    minItems: 1
                    maxItems: 100
                    items:
                      title: keyValue
                      type: object
                      properties:
                        key:
                          description: A reference key is unique.
                          type: string
                        value:
                          type: string
                        category:
                          type: string
                          default: BASIC
                          example: BASIC
                          enum:
                            - TRAVEL_AGENCY_BO_FEED
                            - BASIC
                          description: >
                            Reference category: * TRAVEL_AGENCY_BO_FEED - The
                            reference is stored and goes into travel agency back
                            office feed. * BASIC - Default value. The reference
                            is simply stored.
                  remarks:
                    type: array
                    description: >-
                      This is used for storing remarks. Remarks can only be
                      added.
                    minItems: 1
                    maxItems: 100
                    items:
                      title: remark
                      type: object
                      properties:
                        value:
                          type: string
                        category:
                          type: string
                          default: BASIC
                          example: BASIC
                          enum:
                            - TRAVEL_AGENCY_BO_FEED
                            - BASIC
                          description: >
                            Remark category: * TRAVEL_AGENCY_BO_FEED - The
                            remark is stored and goes into travel agency back
                            office feed. * BASIC - Default value. The remark is
                            simply stored.
              lockOrder:
                type: object
                title: lockedOrder
                required:
                  - locked
                properties:
                  locked:
                    type: boolean
                    default: false
                    example: true
                  remark:
                    type: string
      tags:
        - Order
      responses:
        '200':
          description: Order is updated.
          schema:
            $ref: '#/definitions/OrderReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    delete:
      summary: Delete the order
      description: 'This method allows to cancel an order, by specifying its id.'
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
      tags:
        - Order
      responses:
        '200':
          description: Order is partially deleted.
          schema:
            type: object
            properties:
              itemIds:
                description: >-
                  Id of the orderItem(s) which could not be deleted, or id of
                  the item(s) i.e admissions, accommodations, etc. in case of
                  orderItem(s) partially deleted.
                type: array
                uniqueItems: true
                items:
                  $ref: '#/definitions/Idhref'
        '204':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/orders/{orderId}/ticket-time-limit':
    put:
      summary: Update ticket time limit in an order
      description: >-
        This method allows to override the effective ticket time limit with the
        value defined in field overrideToValue. This operation is allowed only
        when the field overrideAllowed is true.
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          format: uuid
        - name: X-Http-Method-Override
          in: header
          description: Patch in header.
          required: true
          type: string
          format: PATCH
          enum:
            - PATCH
        - name: patchTicketTimeLimitBody
          in: body
          description: Update ticket time limit.
          required: true
          schema:
            type: object
            title: patchTicketTimeLimitBody
            properties:
              effectiveTicketTimeLimit:
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-01-17T08:32:00'
                description: >-
                  Update of effectiveTicketTimeLimit data with this new value
                  (which can be taken from
                  order.ticketTimeLimit.technicalTicketTimeLimit).
      tags:
        - Order
      responses:
        '201':
          description: Order's ticket time limit is successfully overridden.
          schema:
            $ref: '#/definitions/TicketTimeLimitReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /order-previews:
    get:
      summary: Filter orders
      description: This method allows to search orders with filtering criteria.
      parameters:
        - name: providerReference
          in: query
          description: >-
            Filter criteria. Matching path
            "order.orderItem.admission.providerReference",
            "order.orderItem.accommodation.providerReference",
            "order.orderItem.ancillary.providerReference".
          type: string
        - name: distributorTicketNumber
          in: query
          description: >-
            Filter criteria. Matching path
            "order.ticketInfo.distributorTicketNumber".
          type: string
        - name: trainNumber
          in: query
          description: Filter criteria. Matching path "itinerary.segment.vehicle.number".
          type: string
        - name: departureDate
          in: query
          description: >-
            Filter criteria. Matching path
            "itinerary.segment.departureDateTime".
          type: string
        - name: serviceProvider
          in: query
          description: >-
            Filter criteria. Matching path
            "order.orderItem.admission.product.serviceProvider".
          type: string
        - name: travelerLastName
          in: query
          description: >-
            Filter criteria. Matching path "order.actor.name.lastName" with role
            "TRAVELER".
          type: string
        - name: travelerFirstName
          in: query
          description: >-
            Filter criteria. Matching path "order.actor.name.firstName" with
            role "TRAVELER".
          type: string
        - name: maxCreationDateTime
          in: query
          description: >-
            Filter criteria. Matching path "order.creationDateTime". Result to
            orders created until the specified value (inclusive).
          type: string
        - name: minCreationDateTime
          in: query
          description: >-
            Filter criteria. Matching path "order.creationDateTime". Result to
            orders created after the specified value (inclusive).
          type: string
        - name: maxTicketTimeLimit
          in: query
          description: >-
            Filter criteria. Matching path
            "order.ticketTimeLimit.effectiveTicketTimeLimit". Result to orders
            having effectiveTicketTimeLimit until the specified value
            (inclusive).
          type: string
        - name: minTicketTimeLimit
          in: query
          description: >-
            Filter criteria. Matching path
            "order.ticketTimeLimit.effectiveTicketTimeLimit". Result to orders
            having effectiveTicketTimeLimit after the specified value
            (inclusive).
          type: string
        - name: references
          in: query
          description: >-
            Filter criteria. Matching path "order.reference.key",
            "order.reference.value". JSON representation is used on value of
            this field. Example is as following,
            references={"customerId":"Value1","customerName":"Value2"}.
          type: string
        - name: 'page[limit]'
          in: query
          description: The maximum items in the result. Default value is "10".
          type: integer
          default: 10
          minimum: 1
        - name: 'page[offset]'
          in: query
          description: The start index of the requested items. Default value is "0".
          type: integer
          default: 0
          minimum: 0
      tags:
        - Order filtering
      responses:
        '200':
          description: Orders' previews are returned.
          schema:
            $ref: '#/definitions/OrderPreviewsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /prices/calendar-overview/search:
    post:
      summary: Create a calendar overview search
      description: >-
        This method allows to create a calendar search to retrieve the best
        prices per day in a period given in the input.
      parameters:
        - in: body
          name: postCalendarSearchBody
          description: Input criteria for the request.
          schema:
            $ref: '#/definitions/CalendarCriteria'
      tags:
        - Calendar
      responses:
        '201':
          description: Calendar overview search created.
          schema:
            $ref: '#/definitions/CalendarOverviewReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /refund:
    post:
      summary: Refund a collection of ticket(s)
      description: >-
        This method allows to process the refund for a collection of ticket(s)
        by specifying the ticket ids and the order id containing them.
      parameters:
        - name: orderId
          in: query
          description: Id of the order containing the requested tickets.
          required: true
          type: string
          format: uuid
        - name: ticketIds
          in: query
          description: A collection of ticket ids for which refund is requested.
          required: true
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
          minItems: 1
        - name: postRefundBody
          in: body
          description: Refund options.
          required: false
          schema:
            type: object
            title: postRefundBody
            properties:
              overruleReason:
                $ref: '#/definitions/ReasonAfterSales'
              fee:
                $ref: '#/definitions/Money'
                description: >-
                  In case of involuntary refund reason, a distributor manual fee
                  can be specified.
              expectedTotalRefundedAmount:
                $ref: '#/definitions/Money'
                description: Expected refunded amount.
              methodOfPayment:
                description: >-
                  The method of payment can only be specified in case of refund
                  to a bank account.
                type: object
                title: methodOfPayment
                properties:
                  bankAccount:
                    $ref: '#/definitions/Account'
              refundWithoutRelease:
                description: >-
                  Option to enforce the refund with pre-computed refund
                  conditions in the situation of an inventory failure. When
                  used, no Provider interaction is attempted.
                type: boolean
                default: false
                example: false
      tags:
        - AfterSales
      responses:
        '200':
          description: A breakdown of the conditions at time of refund.
          schema:
            $ref: '#/definitions/RefundReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        '409':
          description: Refund conditions have changed.
          schema:
            $ref: '#/definitions/RefundConditionsReply'
        default:
          $ref: '#/responses/default'
  /refund-conditions:
    get:
      summary: Get refund conditions
      description: >-
        This method allows to retrieve the refund conditions for a collection of
        ticket(s) by specifying the ticket ids and the order id containing them.
      parameters:
        - name: orderId
          in: query
          description: Id of the order containing the requested tickets.
          required: true
          type: string
          format: uuid
        - name: ticketIds
          in: query
          description: >-
            A collection of ticket ids for which refund conditions are
            requested.
          required: true
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
          minItems: 1
      tags:
        - AfterSales
      responses:
        '200':
          description: 'Refund conditions, with detailed info.'
          schema:
            $ref: '#/definitions/RefundConditionsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /release:
    post:
      summary: Refund a collection of ticket(s)
      description: >-
        This method allows to process the refund for a collection of ticket(s)
        by specifying the ticket ids and the order id containing them.
      parameters:
        - name: orderId
          in: query
          description: Id of the order containing the requested tickets.
          required: true
          type: string
          format: uuid
        - name: ticketIds
          in: query
          description: A collection of ticket ids for which refund is requested.
          required: false
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
          minItems: 1
      tags:
        - AfterSales
      responses:
        '201':
          description: No Content.
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /station-timetables:
    get:
      summary: Get stationtimetables matching input criteria
      description: >-
        This method allows to get station timetables by specifying a set of
        station timetable criteria in input.
      parameters:
        - in: query
          name: stationTimetableType
          description: >-
            Indicates if it is a departure or arrival timetable. Departure
            timetable lists trains that are departing from the referenceStation.
            Arrival timetable lists trains that arrive at the referenceStation.
          type: string
          enum:
            - DEPARTURE
            - ARRIVAL
          required: true
        - in: query
          name: referenceStation
          description: >-
            Correspond to the station for which you request the timetable. Only
            1A code supported.
          type: string
          minLength: 7
          maxLength: 7
          pattern: '[0-9]$'
          required: true
        - in: query
          name: direction
          description: >-
            If filled, the timetable will include only trains that are going
            through this station. Only 1A code supported.
          type: string
          minLength: 7
          maxLength: 7
          pattern: '[0-9]$'
        - in: query
          name: dateTime
          description: 'Date-time in format YYYY-MM-DDTHH:MM:SS.'
          type: string
          pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        - in: query
          name: transportType
          description: Code (codelist TCS) of the transport type.
          type: string
          pattern: '[0-9]{3}'
        - in: query
          name: max
          type: number
          minimum: 0
          maximum: 20
      tags:
        - StationTimetable
      responses:
        '200':
          description: 'A stationTimetable resource, with detailed info.'
          schema:
            $ref: '#/definitions/StationTimetablesReply'
        '400':
          description: |-
            | code  | title                                     |
            |-------|-------------------------------------------|
            | 24200 | INVALID CODE CONTEXT                      |
            | 32867 | APPLICATION ERROR - CONVERSION IMPOSSIBLE |
            | 1858  | INVALID OPTION ENTERED                    |
          schema:
            $ref: '#/definitions/ErrorReply'
        '500':
          description: |-
            | code | title          |
            |------|----------------|
            | 9511 | DATABASE ERROR |
          schema:
            $ref: '#/definitions/ErrorReply'
        '502':
          description: |-
            | code  | title                                |
            |-------|--------------------------------------|
            | 34463 | UNABLE TO PROCESS - EXTERNAL SYSTEM  |
            | 32241 | ACCESS DENIED                        |
            | 10921 | OUT OF QUOTA                         |
            | 2148  | MORE DATA REQUIRED                   |
            | 27598 | INVALID FORMAT OR MISSING PARAMETERS |
            | 814   | INVALID OR MISSING LOCATION          |
            | 15716 | SAME ORIGIN/DESTINATION NOT ALLOWED  |
            | 34622 | DEPARTURE/ARRIVAL_IS_TOO_NEAR        |
            | 457   | INVALID OR MISSING DATE              |
            | 7244  | CHECK DATE PERIOD                    |
            | 22984 | INVALID PRODUCT TYPE                 |
            | 32864 | NO CONTEXT                           |
            | 9918  | UNSUCCESSFUL TRANSACTION             |
            | 727   | INTERNAL ERROR                       |
          schema:
            $ref: '#/definitions/ErrorReply'
        '504':
          description: |-
            | code | title          |
            |------|----------------|
            | 26344 | FAILED TO CONTACT EXTERNAL SYSTEM |
          schema:
            $ref: '#/definitions/ErrorReply'
        default:
          $ref: '#/responses/default'
  /tickets:
    post:
      summary: Create a ticket or a collection of tickets
      description: >-
        This method allows to create a ticket or a collection of tickets in the
        order.
      parameters:
        - name: orderId
          in: query
          required: true
          type: string
          format: uuid
        - name: postTicketsBody
          in: body
          required: false
          schema:
            description: >-
              This section is to be left empty when performing a retry on
              ticketing operation.
            type: object
            title: postTicketsBody
            properties:
              pspOptions:
                $ref: '#/definitions/PspOptions'
      tags:
        - Ticket
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ErrorReply'
        '202':
          description: Request accepted.
          schema:
            $ref: '#/definitions/PaymentTransactionReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
    get:
      summary: Retrieve a collection of tickets
      description: This method allows to search for a collection of tickets.
      parameters:
        - name: groupReference
          in: query
          type: string
          format: uuid
          required: false
        - name: orderId
          in: query
          type: string
          format: uuid
          required: true
        - name: distributorCode
          in: query
          required: false
          type: string
        - name: orderItemReference
          in: query
          type: string
          format: uuid
          required: false
      tags:
        - Ticket
      responses:
        '200':
          description: Content of the requested collection of tickets.
          schema:
            $ref: '#/definitions/TicketsReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/tickets/{ticketId}':
    get:
      summary: Retrieve a ticket
      description: This method allows to retrieve a ticket by specifying its id.
      parameters:
        - name: ticketId
          in: path
          required: true
          type: string
          format: uuid
        - name: distributorCode
          in: query
          required: false
          type: string
      tags:
        - Ticket
      responses:
        '200':
          description: Content of the requested ticket.
          schema:
            $ref: '#/definitions/TicketReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /travel-offers/day-overview/search:
    post:
      summary: Create a search for the best travel offers on a day
      description: >-
        This method allows to create a search for the best travel offers in one
        day by specifying a set of criteria.
      parameters:
        - in: body
          name: postDayOverviewSearchBody
          description: Input criteria to create the day overview search.
          required: true
          schema:
            $ref: '#/definitions/DayOverviewCriteria'
      tags:
        - Shopping
      responses:
        '201':
          description: Search for the best travel offers on one day created.
          schema:
            $ref: '#/definitions/DayOverviewReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  /travel-offers/search:
    post:
      summary: Create a search for travel offers
      description: >-
        This method allows to create a search for travel offers by specifying a
        set of criteria.
      parameters:
        - in: body
          name: postTravelSearchBody
          description: Input for the search creation.
          required: true
          schema:
            $ref: '#/definitions/TravelSearchBody'
      tags:
        - Shopping
      responses:
        '201':
          description: Searches for travel offers created.
          schema:
            $ref: '#/definitions/TravelSearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/travel-offers/search/{searchId}':
    get:
      summary: Retrieve a travel search
      description: >-
        This method allows to retrieve a search with its travel offers by
        specifying its id. This method allows the scrolling to retrieve
        earlier/later travel offers for the same search. In addition, compatible
        return travel offers can be retrieved.
      parameters:
        - name: searchId
          in: path
          description: Id of the search.
          required: true
          type: string
          format: uuid
        - name: scrollToken
          in: query
          description: Token to scroll and fetch earlier/later travel offers.
          type: string
          required: false
          format: uuid
        - name: offerId
          in: query
          description: 'If provided, compatible return travel offers will be returned.'
          type: string
          format: uuid
          required: false
      tags:
        - Shopping
      responses:
        '200':
          description: Search content.
          schema:
            $ref: '#/definitions/TravelSearchReply'
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
  '/travel-offers/{travelOfferId}':
    get:
      summary: Retrieve a travel offer
      description: >-
        This method allows to retrieve a travel offer containing the details of
        an itinerary and its related offers.
      parameters:
        - name: travelOfferId
          in: path
          description: Identifier of the travel offer.
          required: true
          type: string
          format: uuid
        - name: realTimeInfo
          in: query
          description: To request real time information. By default not returned.
          type: boolean
          default: false
      tags:
        - Shopping
      responses:
        '200':
          description: Content of a travel offer.
          schema:
            $ref: '#/definitions/TravelOfferReply'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          $ref: '#/responses/404'
        default:
          $ref: '#/responses/default'
definitions:
  Accommodation:
    type: object
    allOf:
      - $ref: '#/definitions/AccommodationShared'
      - type: object
        title: accommodationAdditionalData
        properties:
          selectedPreferences:
            type: array
            description: >-
              This section is used only inside the cart. It is added by API
              user.
            items:
              $ref: '#/definitions/AccommodationPreferencesSelection'
            minItems: 1
  AccommodationBooked:
    type: object
    allOf:
      - $ref: '#/definitions/AccommodationShared'
      - type: object
        title: accommodationBookedAdditionalData
        properties:
          accommodationDetails:
            type: array
            items:
              $ref: '#/definitions/AccommodationDetails'
          providerReference:
            type: string
            description: >-
              The provider reference field is filled only once the accommodation
              is booked.
            example: A1B2C3D4
  AccommodationDetails:
    type: object
    description: >-
      This section appears only after booking. It provides final accommodation
      assignment information.
    properties:
      segmentId:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
        readOnly: true
      actorId:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
        readOnly: true
      placeNumber:
        type: string
        example: '023'
        readOnly: true
      coachNumber:
        type: string
        example: '001'
        readOnly: true
      direction:
        type: string
        description: Code (codelist SDR) for the direction.
        example: '006'
        readOnly: true
      position:
        type: string
        description: Code (codelist SPS) for the position.
        example: '003'
        readOnly: true
      configuration:
        type: string
        description: Code (codelist SCT) for the configuration.
        example: 008
        readOnly: true
      passengerProfile:
        type: string
        description: Code (codelist PPF) for the passenger profile.
        example: '002'
        readOnly: true
      equipment:
        type: string
        description: Code (codelist ETP) for the equipment.
        example: '001'
        readOnly: true
      level:
        type: string
        description: Code (codelist DKL) for the deck level.
        example: '002'
        readOnly: true
      environment:
        type: string
        description: Code (codelist ERT) for the environment.
        example: '006'
        readOnly: true
      gender:
        type: string
        description: Code (codelist GDT) for the gender.
        example: '001'
        readOnly: true
      smoking:
        type: boolean
        example: false
        readOnly: true
        default: false
      petsAllowed:
        type: boolean
        example: true
        readOnly: true
        default: false
      bike:
        type: boolean
        example: true
        readOnly: true
        default: false
  AccommodationPreferences:
    type: object
    description: >-
      Preferences which a traveler can request for a specific selected
      accommodation, such as the seat direction, near to window, deck level,
      sleeper's gender.
    properties:
      segmentId:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
        readOnly: true
      allTravelersPreferences:
        type: boolean
        description: >-
          If true, the selected preferences will be applied to all the travelers
          (in this case, the travelerIds field in the selectedPreferences
          section will be ignored). If false, the selected preferences will be
          applied only to the traveler which are linked to.
        readOnly: true
        example: true
        default: false
      availablePreferences:
        type: object
        title: availablePreference
        properties:
          specifiedPlaceOption:
            type: boolean
            description: >-
              If true, it is possible to specify prefered place and coach
              numbers.
            readOnly: true
            example: false
          nearToOption:
            type: boolean
            description: >-
              If true, the system may return a place near the given one if this
              place is not available. If false, the system try to get only the
              specified place.
            readOnly: true
            example: false
            default: false
          directionOptions:
            description: Code (codelist SDR) for the direction option.
            type: array
            items:
              type: string
              readOnly: true
              example: '002'
            uniqueItems: true
          positionOptions:
            description: Code (codelist SPS) for the position option.
            type: array
            items:
              type: string
              readOnly: true
              example: '003'
            uniqueItems: true
          configurationOptions:
            description: Code (codelist SCT) for the configuration option.
            type: array
            items:
              type: string
              readOnly: true
              example: '007'
            uniqueItems: true
          passengerProfileOptions:
            description: Code (codelist PPF) for the passenger profile.
            type: array
            items:
              type: string
              readOnly: true
              example: '010'
            uniqueItems: true
          equipmentOptions:
            description: Code (codelist ETP) for the equipment option.
            type: array
            items:
              type: string
              readOnly: true
              example: '005'
            uniqueItems: true
          levelOptions:
            description: Code (codelist DKL) for the level option.
            type: array
            items:
              type: string
              readOnly: true
              example: '001'
            uniqueItems: true
          environmentOptions:
            description: Code (codelist ERT) for the environment option.
            type: array
            items:
              type: string
              readOnly: true
              example: '004'
            uniqueItems: true
          genderOptions:
            description: Code (codelist GDT) for the gender option.
            type: array
            items:
              type: string
              readOnly: true
              example: '003'
            uniqueItems: true
  AccommodationPreferenceList:
    type: object
    properties:
      specifiedPlace:
        type: object
        title: specifiedPlace
        properties:
          placeNumber:
            type: string
            pattern: '^[a-zA-Z0-9]*$'
            example: '118'
          coachNumber:
            type: string
            pattern: '^[a-zA-Z0-9]*$'
            example: '042'
      nearTo:
        type: boolean
        description: >-
          If true the system may return a place near the given one if this place
          is not available. If false the system try to get only the specified
          place.
        example: true
        default: true
      direction:
        description: Code (codelist SDR) for the direction.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: '001'
      position:
        description: Code (codelist SPS) for the position.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: '002'
      configuration:
        description: Code (codelist SCT) for the configuration.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: '004'
      passengerProfile:
        description: Code (codelist PPF) for the passenger profile.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: 009
      equipment:
        description: Code (codelist ETP) for the equipment.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: '003'
      level:
        description: Code (codelist DKL) for the deck level.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: '002'
      environment:
        description: Code (codelist ERT) for the environment.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: '016'
      gender:
        description: Code (codelist GDT) for the gender.
        type: string
        pattern: '^[a-zA-Z0-9]*$'
        example: '002'
  AccommodationPreferencesSelection:
    type: object
    description: This section allows the selection of accommodation preferences.
    allOf:
      - $ref: '#/definitions/AccommodationPreferenceList'
      - type: object
        required:
          - segmentId
        properties:
          segmentId:
            type: string
            format: uuid
          travelerId:
            type: string
            format: uuid
            description: >-
              If this field is used, the selected accommodation preferences will
              be applied to the specified traveler. Otherwise the selection
              applies to all travelers of the offer.
  AccommodationShared:
    type: object
    description: >-
      An accommodation represents the traveling space product and its optional
      price. If included, the fields price, pricingMode and product are empty.
      One accommodation is linked to one and only one segment.
    required:
      - id
      - classification
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      classification:
        type: string
        description: >-
          In case of INCLUDED accommodations price and pricingMode are not
          returned since the price is already included in the admission. Also
          the product's information are limited (for instance the product code
          is not returned since there is no product associate to the INCLUDED
          accommodations).
        example: OPTIONAL
        enum:
          - INCLUDED
          - OPTIONAL
          - STANDALONE
      description:
        type: string
      priceDetails:
        $ref: '#/definitions/Price'
      pricingMode:
        description: Way in which the price will be calculated.
        readOnly: true
        type: string
        example: INDIVIDUAL
        enum:
          - INDIVIDUAL
          - COLLECTIVE
      category:
        description: Code (codelist ACT) for the accommodation category.
        type: string
        example: '002'
      product:
        $ref: '#/definitions/Product'
      availableSlots:
        description: >-
          Returned only for optional or standalone accommodations, not for the
          included ones, for which the available slots are returned in the
          corresponding admission.
        type: integer
        minimum: 1
        example: 23
      travelerReferences:
        type: array
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
        uniqueItems: true
      segmentsInOverbooking:
        type: array
        description: List of segments with overbooking status.
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
  AccommodationTicketed:
    type: object
    description: >-
      An accommodation represents the traveling space product and its optional
      price. If included, the fields price, pricingMode and product are empty.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      classification:
        type: string
        example: OPTIONAL
        enum:
          - INCLUDED
          - OPTIONAL
          - STANDALONE
      priceDetails:
        $ref: '#/definitions/Price'
      pricingMode:
        description: Way in which the price will be calculated.
        readOnly: true
        type: string
        example: Individual
      category:
        description: Code (codelist ACT) for the accommodation category.
        type: string
        example: '002'
      product:
        $ref: '#/definitions/ProductTicketed'
      travelers:
        type: array
        items:
          $ref: '#/definitions/Traveler'
        uniqueItems: true
      accommodationDetails:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/AccommodationDetails'
      providerReference:
        type: string
        readOnly: true
        example: A1B2C3D4
  Account:
    type: object
    description: >-
      Account forms of payment are identified by a reusable account number, like
      cards and unlike vouchers for example.
    required:
      - accountId
    properties:
      accountId:
        type: string
        description: The account identifier code.
        minLength: 1
        maxLength: 99
      subType:
        type: string
        description: Identifies the subtype of the method of payment.
        example: Paypal
      vendor:
        type: string
        description: Identifies the brand owner of the account.
        minLength: 1
        maxLength: 30
      program:
        type: string
        description: Identifies the program related to the account.
        minLength: 1
        maxLength: 30
      holder:
        $ref: '#/definitions/Holder'
  Actor:
    type: object
    description: >-
      An actor represents any person linked to an order. It can be a traveler, a
      buyer, a payer or the combination of the previous.
    allOf:
      - $ref: '#/definitions/Traveler'
      - type: object
        title: actorAdditionalData
        properties:
          roles:
            type: array
            description: Role(s) of the actor
            items:
              type: string
              example: TRAVELER
              enum:
                - TRAVELER
                - PAYER
                - BUYER
            minItems: 1
            uniqueItems: true
          orderItemIds:
            type: array
            items:
              $ref: '#/definitions/Idhref'
            uniqueItems: true
          references:
            type: array
            description: >-
              Used for storing customer references. If an existing key is used,
              the value will be overridden.
            maxItems: 10
            items:
              title: keyValue
              type: object
              properties:
                key:
                  type: string
                  description: A reference key is unique.
                value:
                  type: string
                  maxLength: 100
                  minLength: 1
                category:
                  type: string
                  default: BASIC
                  example: BASIC
                  enum:
                    - TRAVEL_AGENCY_BO_FEED
                    - BASIC
                  description: >
                    Reference category: * TRAVEL_AGENCY_BO_FEED - The reference
                    is stored and goes into travel agency back office feed. *
                    BASIC - Default value. The reference is simply stored.
  Address:
    type: object
    properties:
      streetNumber:
        type: string
        example: '485'
        description: Positive street number.
      streetNumberSuffix:
        type: string
        example: bis
      streetName:
        example: Route du Pin Montard
        type: string
      buildingName:
        type: string
      appartmentNumber:
        type: string
        description: 'Room, appartment or suite number.'
      cityName:
        type: string
        example: Biot
      postalCode:
        type: string
        example: '06560'
      county:
        type: string
      stateProvince:
        type: string
      countryName:
        type: string
        example: France
      name:
        $ref: '#/definitions/Name'
      countryCode:
        type: string
        description: ISO 3166-1 country code
        pattern: '[a-zA-Z]{2}'
        example: FR
  Admission:
    type: object
    description: >-
      An admission represents the right to travel with a defined set of
      vehicles. Its price depends, among others, on the requested level of
      service and market parameters.
    allOf:
      - $ref: '#/definitions/AdmissionShared'
      - type: object
        title: admissionAdditionalData
        properties:
          includedAccommodationIds:
            type: array
            items:
              $ref: '#/definitions/Idhref'
            uniqueItems: true
          optionalAccommodationIds:
            type: array
            items:
              $ref: '#/definitions/Idhref'
            uniqueItems: true
          includedAncillaryIds:
            type: array
            items:
              $ref: '#/definitions/Idhref'
            uniqueItems: true
          optionalAncillaryIds:
            type: array
            items:
              $ref: '#/definitions/Idhref'
            uniqueItems: true
          products:
            type: array
            items:
              $ref: '#/definitions/Product'
          segmentsInOverbooking:
            type: array
            description: List of segments with overbooking status.
            items:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
  AdmissionShared:
    type: object
    description: >-
      An admission represents the right to travel with a defined set of
      vehicles. Its price depends, among others, on the requested level of
      service and market parameters.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated after added into cart.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      providerReference:
        type: string
        description: >-
          The provider reference field is filled only once the admission is
          booked.
        example: A1B2C3D4
      travelerReferences:
        type: array
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
        uniqueItems: true
      priceDetails:
        $ref: '#/definitions/Price'
      pricingMode:
        description: Way in which the price will be calculated.
        readOnly: true
        type: string
        example: INDIVIDUAL
        enum:
          - INDIVIDUAL
          - COLLECTIVE
      availableSlots:
        type: integer
        minimum: 1
        example: 23
  AdmissionTicketed:
    type: object
    description: >-
      An admission represents the right to travel with a defined set of
      vehicles. Its price depends, among others, on the requested level of
      service and market parameters.
    allOf:
      - $ref: '#/definitions/AdmissionShared'
      - type: object
        title: admissionTicketedAdditionalData
        properties:
          includedAccommodations:
            type: array
            items:
              $ref: '#/definitions/AccommodationTicketed'
            uniqueItems: true
          optionalAccommodations:
            type: array
            items:
              $ref: '#/definitions/AccommodationTicketed'
            uniqueItems: true
          includedAncillaries:
            type: array
            items:
              $ref: '#/definitions/AncillaryTicketed'
            uniqueItems: true
          optionalAncillaries:
            type: array
            items:
              $ref: '#/definitions/AncillaryTicketed'
            uniqueItems: true
          products:
            type: array
            items:
              $ref: '#/definitions/ProductTicketed'
          reservation:
            type: array
            items:
              type: object
              title: reservation
              properties:
                reservationType:
                  type: string
                status:
                  description: >-
                    Defines the reservation's availability status. If it is set
                    to Overbooking, availableSlots value is the number of seats
                    available in overbooking mode.
                  type: string
                  enum:
                    - OVERBOOKING
                  example: OVERBOOKING
                segments:
                  type: array
                  items:
                    $ref: '#/definitions/Segment'
  Ancillary:
    type: object
    allOf:
      - $ref: '#/definitions/AncillaryShared'
      - type: object
        title: ancillaryAdditionalData
        properties:
          travelerReferences:
            type: array
            items:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            uniqueItems: true
  AncillarySearchBody:
    type: object
    required:
      - common
    description: >-
      Input parameters to shop for standalone ancillaries. EITHER a set of
      searchCriteria can be specified OR a searchFromOrder can be performed. For
      both cases, the common part is required.
    minProperties: 2
    maxProperties: 2
    properties:
      common:
        required:
          - distributor
        type: object
        title: common
        properties:
          tags:
            type: array
            uniqueItems: true
            items:
              type: string
          productCodes:
            type: array
            items:
              type: string
            uniqueItems: true
          distributor:
            type: string
            example: SNB
          language:
            default: EN
            type: string
      searchCriteria:
        type: object
        title: searchCriteria
        maxProperties: 1
        properties:
          travelers:
            type: array
            items:
              $ref: '#/definitions/AnonymousTraveler'
          atLocation:
            description: Ancillaries related to the location like vouchers.
            type: object
            title: atLocation
            properties:
              locationSearch:
                type: array
                items:
                  type: object
                  title: locationSearch
                  required:
                    - startDate
                    - endDate
                    - location
                  properties:
                    startDate:
                      type: string
                      format: date
                      example: '2018-01-31'
                      description: YYYY-MM-DD
                    endDate:
                      type: string
                      format: date
                      example: '2018-01-31'
                      description: YYYY-MM-DD
                    location:
                      $ref: '#/definitions/Location'
                    locationType:
                      description: >-
                        The station type could be either an origin or a
                        destination.
                      default: DESTINATION
                      example: DESTINATION
                      type: string
                      enum:
                        - ORIGIN
                        - DESTINATION
          bike:
            type: object
            title: bike
            required:
              - itineraryId
            properties:
              itineraryId:
                type: string
                format: uuid
                example: 71def814-0a90-4271-bc56-954ffa43f5ff
      searchFromOrder:
        type: object
        title: searchFromOrder
        required:
          - orderId
        properties:
          orderId:
            description: >-
              Reference id to the order for which the ancillaries must be
              retrieved.
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          categories:
            description: >-
              Restricts search to specific categories of ancillaries. If not
              specified the search will return both categories.
            type: array
            items:
              type: string
              example: LOCATION_BASED
              enum:
                - LOCATION_BASED
                - OTHERS
  AncillaryDetail:
    type: object
    description: >-
      This section appears only after booking. It provides final ancillary
      assignment information.
    properties:
      actorId:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
        readOnly: true
      mealPreference:
        type: string
        description: Booked meal code (codelist SER).
        example: VGM
  AncillarySearch:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      timeToLive:
        type: string
        example: PT20M
        description: >-
          Time to live in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      criteria:
        $ref: '#/definitions/AncillarySearchBody'
      result:
        type: array
        description: A collection of ancillaries.
        items:
          $ref: '#/definitions/Ancillary'
  AncillarySelected:
    type: object
    allOf:
      - $ref: '#/definitions/Ancillary'
      - type: object
        title: ancillarySelectedAdditionalData
        properties:
          quantity:
            type: integer
            minimum: 1
            example: 2
          travelerIds:
            description: Traveler identifiers on which the ancillary is actually applying.
            type: array
            items:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            uniqueItems: true
          selectedPreferences:
            type: array
            items:
              $ref: '#/definitions/AncillaryPreferenceSelection'
  AncillaryShared:
    type: object
    description: >-
      An ancillary is a product which may be linked to admissions in a single or
      a separate offer and enhance their value for the customer. Examples of
      Ancillary Services include on-board meals, special assistance, Wi-Fi, bike
      space. Some ancillaries may be supplied by a different provider than the
      Rail Service Provider supplying the admission with which they are bundled.
      The linking business rules are owned by the Rail Service Provider
      supplying the admission. For an included ancillary the product code and
      the description will be returned. For non-hosted ancillaries, like Espace
      Pro, the description will be the one returned by the external provider.
    required:
      - id
      - classification
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      classification:
        type: string
        description: >-
          In case of INCLUDED ancillaries price and pricingMode are not returned
          since the price is already included in the admission. Also the
          product's information is limited (for instance the product code is not
          returned since there is no product associate to the INCLUDED
          ancillaries).
        example: OPTIONAL
        enum:
          - INCLUDED
          - OPTIONAL
          - STANDALONE
      priceDetails:
        $ref: '#/definitions/Price'
      pricingMode:
        description: Way in which the price will be calculated.
        readOnly: true
        type: string
        example: INDIVIDUAL
        enum:
          - INDIVIDUAL
          - COLLECTIVE
      category:
        description: Code for the ancillary category.
        type: string
        example: '014'
      tags:
        description: Sub category of the ancillary. The same value as in data management.
        type: array
        uniqueItems: true
        items:
          type: string
      product:
        $ref: '#/definitions/Product'
      orderItemId:
        $ref: '#/definitions/Idhref'
      groupReference:
        type: string
        description: >-
          Common reference used to identify order items that have been booked or
          grouped together.
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      location:
        $ref: '#/definitions/Location'
      locationType:
        description: The station type could be either an origin or a destination.
        default: DESTINATION
        example: DESTINATION
        type: string
        enum:
          - ORIGIN
          - DESTINATION
      countries:
        description: Refers to the country where the pass is valid.
        type: array
        uniqueItems: true
        items:
          type: string
          pattern: '^[a-zA-Z]{2}$'
          example: BE
  AncillaryTicketed:
    type: object
    description: >-
      An ancillary is a product which may be linked to admissions in a single or
      a separate offer and enhance their value for the customer. Examples of
      Ancillary Services include on-board meals, special assistance, Wi-Fi, bike
      space. Some ancillaries may be supplied by a different provider than the
      Rail Service Provider supplying the admission with which they are bundled.
      The linking business rules are owned by the Rail Service Provider
      supplying the admission. For an included ancillary the product code and
      the description will be returned. For non-hosted ancillaries, like 'Espace
      Pro', the description will be the one returned by the external provider.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      providerReference:
        type: string
        description: >-
          The provider reference field is filled only once the ancillary is
          booked.
        example: A1B2C3D4
      classification:
        type: string
        example: OPTIONAL
        enum:
          - INCLUDED
          - OPTIONAL
          - STANDALONE
      priceDetails:
        $ref: '#/definitions/Price'
      pricingMode:
        description: Way in which the price will be calculated.
        readOnly: true
        type: string
        example: INDIVIDUAL
        enum:
          - INDIVIDUAL
          - COLLECTIVE
      category:
        description: Code for the ancillary category.
        type: string
      products:
        type: array
        items:
          $ref: '#/definitions/ProductTicketed'
      travelerReferences:
        type: array
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
        uniqueItems: true
  AnonymousTraveler:
    type: object
    title: travelerAdditionalData
    description: 'Traveler entity containing only the basic, non-identifiable information.'
    properties:
      dateOfBirth:
        type: string
        format: date
        example: '1987-07-25'
        description: >-
          Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), e.g.
          2002-07-25: YYYY-MM-DD.
      reductions:
        $ref: '#/definitions/Reduction'
      retrievedFromProfile:
        type: boolean
        example: true
        default: false
        description: >-
          True when the traveler information has been retrieved from a profile.
          False when it has been provided by the user.
  AncillaryBooked:
    type: object
    allOf:
      - $ref: '#/definitions/AncillaryShared'
      - type: object
        title: ancillaryBookedAdditionalData
        properties:
          providerReference:
            type: string
            description: >-
              The provider reference field is filled only once the ancillary is
              booked.
            example: A1B2C3D4
          quantity:
            type: integer
            minimum: 0
            example: 2
          actorIds:
            description: Actor identifiers on which the ancillary is actually applying.
            type: array
            items:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            uniqueItems: true
          ancillaryDetails:
            type: array
            items:
              $ref: '#/definitions/AncillaryDetail'
  AncillaryPreferenceSelection:
    type: object
    properties:
      travelerIds:
        type: array
        uniqueItems: true
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
        minItems: 1
      mealPreference:
        type: string
        description: >-
          Meal preference code. Codes (codelist SER) for the wished meal
          preference.
        example: VGM
  BoundOptions:
    type: object
    description: >-
      Optional parameters concerning the trip connections. Inbound options can
      only be specified if performing a POST/travel-offers/search. For all the
      other POST methods, only the outbound options are supported.
    properties:
      numberOfItinerariesBefore:
        type: integer
        description: >-
          Minimum number of itineraries to be returned before the specified
          search time. The sum of itineraries before and after must be less or
          equal to six.
        minimum: 0
        example: 2
      numberOfItinerariesAfter:
        type: integer
        description: >-
          Minimum number of itineraries to be returned after the specified
          search time. The sum of itineraries before and after must be less or
          equal to six.
        minimum: 0
        example: 4
      viaStations:
        type: array
        description: List of via stations.
        items:
          title: viaStation
          type: object
          properties:
            code:
              type: string
              example: '8065969'
            layOverTime:
              description: Minimun change time (in minutes) for this specific via station.
              type: integer
              minimum: 0
              example: 40
      incrementalChangeTime:
        description: Extends the time required for changes by a specified percentage.
        type: integer
        minimum: 100
        maximum: 500
        example: 250
      vehicleNumbers:
        description: A list of wished/non wished vehicle numbers.
        type: object
        title: vehicleNumbersData
        properties:
          code:
            type: array
            items:
              title: code
              type: string
              example: '123456'
          preferenceLevel:
            description: >-
              ONLY: Only itineraries containing at least one of the vehicle
              numbers in input. PREFERRED: If at least one train matches, only
              the matching itineraries are returned; otherwise all itineraries.
              UNACCEPTALE: All itineraries are returned but those with a
              matching vehicle number.
            type: string
            example: PREFERRED
            default: PREFERRED
            enum:
              - ONLY
              - PREFERRED
              - UNACCEPTABLE
  CalendarCriteria:
    type: object
    description: Input parameters to create a calendar request.
    required:
      - distributor
      - origin
      - destination
    properties:
      distributor:
        description: Distributor code.
        type: string
        example: BNE
      country:
        type: string
        description: >-
          Customer country code (format ISO 3166-1
          https://www.iso.org/iso-3166-country-codes.html).
        minLength: 2
        maxLength: 2
        pattern: '^[a-zA-Z]{2}$'
        example: BE
      language:
        type: string
        description: >-
          Requested language (format ISO 639-1:2002
          https://www.iso.org/iso-639-language-codes.html).
        minLength: 2
        maxLength: 2
        pattern: '^[a-zA-Z]{2}$'
        example: EN
      currency:
        type: string
        description: >-
          Wished currency (format ISO 4217
          https://www.iso.org/iso-4217-currency-codes.html).
        minLength: 3
        maxLength: 3
        pattern: '^[a-zA-Z]{3}$'
        example: EUR
      origin:
        description: 1A code of the requested origin station.
        type: string
        example: '8727100'
      destination:
        description: 1A code of the requested destination station.
        type: string
        example: '8727100'
      startDate:
        description: Beginning date of the interval.
        type: string
        format: date
        example: '2017-09-08'
      endDate:
        description: >-
          Final date of the interval. If not provided, the default will be the
          date 30 days after the start date.
        type: string
        format: date
        example: '2017-09-18'
      travelers:
        type: object
        title: travelers
        properties:
          dateOfBirth:
            type: array
            description: 'If no travelers are specified, the default is one adult.'
            maxItems: 2
            items:
              type: string
              format: date
              example: '1985-05-05'
          retrievedFromProfile:
            type: boolean
            description: >-
              True when the traveler information has been retrieved from a
              profile. Must be provided by the user.
            example: true
            default: false
      travelClass:
        description: >-
          Code (codelist TCC) for the wished travel class. If provided the
          results will be shown per day for the travel class specified. If
          provided and no proposals are available for one or more itineraries,
          no offer is returned but ALL the itineraries are returned. If no
          proposals for all the itineraries a warning message is also returned:
          NO FARE RETURNED FOR THIS SPECIFIC SEARCH.
        type: string
        example: '001'
      returnTripProducts:
        description: For receiving return products. Single products by default.
        type: boolean
        example: true
        default: false
      outwardOfferId:
        description: >-
          Id of the offer selected for the outbound journey. Used to get inward
          offers.
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      productCodes:
        description: Only the products specified will be returned.
        type: array
        uniqueItems: true
        items:
          type: string
          example: FA00
  CalendarPrice:
    type: object
    description: >-
      Provide the best prices per day over a data range for a given itinerary.
      Additionally, the results can be shown for a specific travel class.
    properties:
      travelClass:
        description: >-
          Code (codelist TCC) for the travel class. If provided and no proposals
          are available for one or more itineraries, no offer is returned but
          ALL the itineraries are returned. If no proposals for all the
          itineraries a warning message is also returned: NO FARE RETURNED FOR
          THIS SPECIFIC SEARCH.
        type: string
        example: '001'
      flexibilityLevel:
        description: Code (codelist RFB) for the flexibility.
        type: string
        example: '002'
      withRestrictions:
        description: >-
          Used for flagging offers that have constraints for booking such as,
          for example, return products that can only be booked with the
          compatible outward offer.
        type: boolean
        example: true
        default: false
      departureDate:
        type: string
        format: date
        example: '2017-09-09'
        description: YYYY-MM-DD
      price:
        $ref: '#/definitions/Money'
  CalendarSearch:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      timeToLive:
        type: string
        example: PT20M
        description: >-
          Time to live in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      calendarCriteria:
        $ref: '#/definitions/CalendarCriteria'
      calendarPrices:
        type: array
        items:
          $ref: '#/definitions/CalendarPrice'
  CardAndPass:
    type: object
    allOf:
      - $ref: '#/definitions/CardAndPassShared'
      - type: object
        title: cardAndPassAdditionalData
        properties:
          travelerReferences:
            type: array
            items:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            uniqueItems: true
  CardAndPassSearch:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      timeToLive:
        type: string
        example: PT20M
        description: >-
          Time to live in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      criteria:
        $ref: '#/definitions/CardAndPassSearchBody'
      result:
        type: array
        description: A collection of cards and passes.
        items:
          $ref: '#/definitions/CardAndPass'
  CardAndPassSearchBody:
    type: object
    description: Input parameters to shop rail cards and passes.
    properties:
      searchCriteria:
        type: object
        required:
          - distributor
        title: searchCriteria
        properties:
          tags:
            type: array
            uniqueItems: true
            items:
              type: string
          productCodes:
            type: array
            items:
              type: string
            uniqueItems: true
          distributor:
            type: string
            example: SNB
          language:
            default: EN
            type: string
          countries:
            description: Searches rail cards and passes with location constraints.
            type: array
            uniqueItems: true
            items:
              type: string
              pattern: '^[a-zA-Z]{2}$'
              example: BE
          startDate:
            type: string
            format: date
            example: '2018-01-31'
            description: YYYY-MM-DD
          endDate:
            type: string
            format: date
            example: '2018-01-31'
            description: YYYY-MM-DD
          travelClass:
            description: >-
              Code (codelist TCC) for the travel class. If provided and no
              proposals are available for one or more itineraries, no offer is
              returned but ALL the itineraries are returned. If no proposals for
              all the itineraries a warning message is also returned: NO FARE
              RETURNED FOR THIS SPECIFIC SEARCH.
            type: string
            example: '002'
          travelers:
            type: array
            items:
              $ref: '#/definitions/AnonymousTraveler'
  CardAndPassShared:
    type: object
    description: >-
      A card is a product which entitles the traveler to buy train tickets at a
      discount. A pass is a product which allows to travel without paying each
      time.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      priceDetails:
        $ref: '#/definitions/Price'
      pricingMode:
        description: Way in which the price will be calculated.
        readOnly: true
        type: string
        example: INDIVIDUAL
        enum:
          - INDIVIDUAL
          - COLLECTIVE
      category:
        description: Code for the card or pass category.
        type: string
        example: '014'
      tags:
        description: >-
          Sub category of the card or pass. The same value as in data
          management.
        type: array
        uniqueItems: true
        items:
          type: string
      product:
        $ref: '#/definitions/Product'
      countries:
        description: Refers to the country where the pass is valid.
        type: array
        uniqueItems: true
        items:
          type: string
          pattern: '^[a-zA-Z]{2}$'
          example: BE
  Cart:
    type: object
    description: >-
      A cart represents a container used to store selected offers and travelers
      data needed to manage a travel booking.
    required:
      - id
      - creationTime
    allOf:
      - $ref: '#/definitions/TotalPriceInCart'
      - type: object
        properties:
          id:
            type: string
            format: uuid
            description: Automatically generated.
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          creationTime:
            type: string
            format: date-time
            example: '2017-01-17T08:32:00Z'
            description: >-
              Datetime in ISO 8601 (http://www.w3.org/TR/NOTE-datetime),
              YYYY-MM-DDTHH:MM:SSZ.
          expirationTime:
            type: string
            format: date-time
            example: '2017-01-17T08:32:00Z'
            description: >-
              Datetime in ISO 8601 (http://www.w3.org/TR/NOTE-datetime),
              YYYY-MM-DDTHH:MM:SSZ.
          travelers:
            type: array
            items:
              $ref: '#/definitions/Traveler'
            uniqueItems: true
          orderId:
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          selectedOffers:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/OfferSelected'
  Contact:
    type: object
    description: A set of contact information.
    properties:
      emailAddresses:
        type: array
        items:
          $ref: '#/definitions/EmailAddress'
        uniqueItems: true
      phoneNumbers:
        type: array
        items:
          $ref: '#/definitions/PhoneNumber'
        uniqueItems: true
      mailingAddresses:
        type: array
        items:
          $ref: '#/definitions/Address'
        uniqueItems: true
  DayOverviewCriteria:
    type: object
    description: Input parameters to create a day overview request.
    required:
      - distributor
      - origin
      - destination
    properties:
      distributor:
        type: string
        description: Requested distributor code.
        example: BNE
      country:
        type: string
        description: >-
          Customer country code (format ISO 3166-1
          https://www.iso.org/iso-3166-country-codes.html).
        minLength: 2
        maxLength: 2
        pattern: '^[a-zA-Z]{2}$'
        example: BE
      language:
        type: string
        description: >-
          Requested language (format ISO 639-1:2002
          https://www.iso.org/iso-639-language-codes.html).
        minLength: 2
        maxLength: 2
        pattern: '^[a-zA-Z]{2}$'
        example: EN
      currency:
        type: string
        description: >-
          Wished currency (format ISO 4217
          https://www.iso.org/iso-4217-currency-codes.html).
        minLength: 3
        maxLength: 3
        pattern: '^[a-zA-Z]{3}$'
        example: EUR
      origin:
        type: string
        description: 1A code of the requested origin station.
        example: '8727100'
      destination:
        type: string
        description: 1A code of the requested destination station.
        example: '8727100'
      date:
        type: string
        description: 'If not provided, default is today.'
        format: date
        example: '2017-09-08'
      returnDate:
        type: string
        description: To be specified if a return date is needed.
        format: date
        example: '2017-09-10'
      travelers:
        type: array
        description: >-
          Only the date of birth is used for day overview. If no traveler is
          specified, the default passenger type (according to each provider) is
          used; typically an adult without reductions. In a round trip, the
          traveler definition has to be the same for the whole trip, if not only
          the traveler used for the outward trip will be considered.
        items:
          $ref: '#/definitions/AnonymousTraveler'
      travelClass:
        description: >-
          Code (codelist TCC) for the wished travel class. If provided the
          results would be shown per schedule solution for the travel class
          specified. If nothing is specified, first and second are returned by
          default. If provided and no proposals are available for one or more
          itineraries, no offer is returned but ALL the itineraries are
          returned. If no proposals for all the itineraries a warning message is
          also returned: NO FARE RETURNED FOR THIS SPECIFIC SEARCH.
        type: string
        example: '001'
      offersPerFlexibility:
        description: >-
          If true, it will return the offers containing the best prices per
          schedule solution AND travel class AND flexibility level.
        type: boolean
        default: true
        example: false
      productCodes:
        description: Only the products specified will be returned.
        type: array
        uniqueItems: true
        items:
          type: string
          example: FAM50
      outwardOfferId:
        description: Id of the outward offer selected. Used to get the inward offers.
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
  DayOverviewSearch:
    type: object
    description: >-
      Provides the best travel offers per schedule solution per day.
      Additionally, the results can be shown per flexibility and for a specific
      travel class.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      timeToLive:
        type: string
        example: PT20M
        description: >-
          Time to live in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      criteria:
        $ref: '#/definitions/DayOverviewCriteria'
      travelOffers:
        type: array
        items:
          $ref: '#/definitions/TravelOfferBasic'
  Document:
    type: object
    description: Set of information on a file that has been named.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      documentType:
        type: string
        description: Refers to aims of communication content.
        example: BOOKING_CONFIRMATION
        enum:
          - BOOKING_CONFIRMATION
          - TICKETING_CONFIRMATION
          - TICKETING_DELIVERY
          - REFUND_CONFIRMATION
          - EXCHANGE_CONFIRMATION
      ticketFormat:
        description: This field is only used for tickets.
        type: string
        example: PDF
        enum:
          - PDF
          - PNG
      mediaType:
        description: Type of support used to store and deliver information.
        type: string
        example: E-MAIL
        enum:
          - PAPER
          - E-MAIL
          - TICKET
      documentLink:
        type: string
        format: url
      relatedActorsIds:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Idhref'
      groupReferences:
        type: array
        uniqueItems: true
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
      history:
        type: array
        uniqueItems: true
        items:
          type: object
          title: event
          description: This section shows list of dispatches of a document.
          properties:
            action:
              type: string
              example: CREATION
              enum:
                - CREATION
                - SENT
                - PRINT
            actionDate:
              type: string
              pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
              example: '2017-01-17T08:32:00'
              description: 'Date-time in format YYYY-MM-DDTHH:MM:SS'
            deliveryInfo:
              description: Data for document delivery.
              type: object
              title: deliveryInfo
              properties:
                recipientEmails:
                  $ref: '#/definitions/RecipientEmails'
                postalAddresses:
                  type: array
                  uniqueItems: true
                  items:
                    $ref: '#/definitions/Address'
      relatedTicketIds:
        type: array
        description: Addresses ticket ids related to the document.
        uniqueItems: true
        items:
          $ref: '#/definitions/Idhref'
      active:
        description: 'Addresses the validity of the document, i.e. if it is active or not.'
        type: boolean
        example: true
        default: true
  DocumentFormat:
    type: string
    example: PDF
    description: 'The type of document, such as a PDF or PNG.'
    enum:
      - PDF
      - PNG
  DocumentInformation:
    type: object
    description: Document's minimum content.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
  EmailAddress:
    type: object
    required:
      - address
    properties:
      category:
        type: string
        example: BUSINESS
        description: Description of the email address.
        enum:
          - BUSINESS
          - PERSONAL
          - OTHER
      address:
        type: string
        format: email
        example: user@railkit.com
        minLength: 3
  ExchangeData:
    type: object
    required:
      - tickets
    allOf:
      - $ref: '#/definitions/ExchangeOperationAmount'
      - type: object
        title: exchangeOfferBasicAdditionalData
        properties:
          refundedAmountWithOptionalAccommodations:
            $ref: '#/definitions/Money'
          additionalAmountWithOptionalAccommodations:
            $ref: '#/definitions/Money'
          tickets:
            type: array
            uniqueItems: true
            description: Tickets selected for exchange.
            items:
              type: object
              title: ticket
              required:
                - ticketId
              properties:
                ticketId:
                  $ref: '#/definitions/Idhref'
                ticketValue:
                  $ref: '#/definitions/Money'
                exchangePenalty:
                  $ref: '#/definitions/Money'
          repricedTickets:
            type: array
            description: Tickets linked to the exchange selection.
            uniqueItems: true
            items:
              type: object
              title: repricedTicket
              properties:
                ticketId:
                  $ref: '#/definitions/Idhref'
                ticketValue:
                  $ref: '#/definitions/Money'
                exchangePenalty:
                  $ref: '#/definitions/Money'
                additionalCollection:
                  $ref: '#/definitions/Money'
          reason:
            $ref: '#/definitions/ReasonAfterSales'
  ExchangeOfferBasic:
    type: object
    description: >-
      An exchange offer is a cohesive bundle of admissions, accommodations and
      ancillaries which corresponds to a global exchange solution for specified
      itinerary and travelers.
    allOf:
      - $ref: '#/definitions/OfferBasic'
      - type: object
        title: exchangeOfferBasicAdditionalData
        properties:
          exchangeData:
            $ref: '#/definitions/ExchangeData'
  ExchangeOfferProposed:
    type: object
    description: >-
      An exchange offer is a cohesive bundle of admissions, accommodations and
      ancillaries which corresponds to a global exchange solution for specified
      itinerary and travelers.
    allOf:
      - $ref: '#/definitions/ExchangeOfferBasic'
      - type: object
        title: exchangeOfferProposedData
        properties:
          travelers:
            type: array
            items:
              $ref: '#/definitions/Traveler'
          accommodations:
            type: array
            items:
              $ref: '#/definitions/Accommodation'
          admissions:
            type: array
            items:
              $ref: '#/definitions/Admission'
          ancillaries:
            type: array
            items:
              $ref: '#/definitions/Ancillary'
  ExchangeOperationAmount:
    type: object
    maxProperties: 1
    properties:
      refundedAmount:
        $ref: '#/definitions/Money'
        description: Amount for the operation in case it results into a monetary refund.
      additionalAmount:
        $ref: '#/definitions/Money'
        description: >-
          Amount for the operation in case it results into an additional amount
          to pay.
  ExchangeSelection:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      creationTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Date-time in format YYYY-MM-DDTHH:MM:SS'
      failed:
        type: boolean
        description: >-
          If true, the exchange has been partially successfull. Some of the
          selected tickets may not have been exchanged. Some of the new tickets
          may not have been issued.
        default: false
        example: false
      groupReference:
        type: string
        description: >-
          Common reference used to identify order items that have been booked or
          grouped together.
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      selectedTickets:
        type: array
        uniqueItems: true
        description: Tickets selected for exchange.
        items:
          type: object
          title: selectedTicket
          properties:
            ticketId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            exchangePenalty:
              $ref: '#/definitions/Money'
      repricedTickets:
        type: array
        uniqueItems: true
        description: Tickets linked to the exchange selection.
        items:
          type: object
          title: repricedTicket
          properties:
            ticketId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            exchangePenalty:
              $ref: '#/definitions/Money'
            additionalCollection:
              $ref: '#/definitions/Money'
      orderItemIds:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Idhref'
      totalRefundAmount:
        $ref: '#/definitions/Money'
        description: >-
          Total amount for the operation in case it results into a monetary
          refund.
      refundBreakdownPerMethodOfPayment:
        description: Amount breakdown per method of payment in case of refunded amount.
        type: array
        items:
          $ref: '#/definitions/PaymentBreakdownItem'
      totalAdditionalAmount:
        $ref: '#/definitions/Money'
        description: >-
          Total amount for the operation in case it results into an additional
          amount to pay.
      overruleReason:
        $ref: '#/definitions/ReasonAfterSales'
      fee:
        $ref: '#/definitions/Fee'
        description: >-
          In case of involuntary exchange reason, a distributor manual fee can
          be specified and is accounted in the operation.
      ticketTimeLimit:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Date-time in format YYYY-MM-DDTHH:MM:SS'
  ExchangeTravelOffer:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      itinerary:
        $ref: '#/definitions/Itinerary'
      exchangeOffers:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/ExchangeOfferProposed'
      segmentsWithoutProducts:
        type: array
        description: >-
          Segments for which no admission, accommodation, ancillary are
          returned.
        uniqueItems: true
        items:
          title: segmentWithoutProduct
          type: object
          properties:
            segmentId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            departureStation:
              $ref: '#/definitions/Location'
            arrivalStation:
              $ref: '#/definitions/Location'
            bookableStatus:
              description: >-
                Code (codelist BST) for the bookable status. This will only be
                returned when a travel offers search is performed.
              type: string
              example: PARTIALLY_BOOKABLE
            transportType:
              description: Code (codelist TCS) for the transport type.
              type: string
              example: '002'
  ExchangeTravelOfferBasic:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      itinerary:
        $ref: '#/definitions/ItineraryBasic'
      exchangeOffers:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/ExchangeOfferBasic'
      segmentsWithoutProducts:
        type: array
        description: >-
          Segments for which no admission, accommodation, ancillary are
          returned.
        uniqueItems: true
        items:
          title: segmentWithoutProduct
          type: object
          properties:
            segmentId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            departureStation:
              $ref: '#/definitions/Location'
            arrivalStation:
              $ref: '#/definitions/Location'
            bookableStatus:
              description: >-
                Code (codelist BST) for the bookable status. This will only be
                returned when a travel offers search is performed.
              type: string
              example: PARTIALLY_BOOKABLE
            transportType:
              description: Code (codelist TCS) for the transport type.
              type: string
              example: '002'
  ExchangeTravelOffersSearch:
    type: object
    description: >-
      An exchange travel offer search contains the exchange travel search body
      and a collection of exchange travel offers.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      timeToLive:
        type: string
        example: PT20M
        description: >-
          Time to live in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      criteria:
        $ref: '#/definitions/ExchangeTravelSearchBody'
      travelOffers:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/ExchangeTravelOfferBasic'
      timeRange:
        description: >-
          Time range of the itineraries in response. In case of search by
          departure dateTime: - for the first request, the earliest and latest
          departure time (t1 and t2) are the ones returned by Hafas prior any
          filtering. - in case of forward scrolling (scrollLater), the earliest
          departure time is the latest date time returned in the previous
          request (t2) and the latest date time is the last date time returned
          by Hafas prior any filtering (t3). (opposite for backward scrolling)
          In case of search by arrival dateTime, the logic is the same but
          reversed (i.e. the range is about the earliest and latest arrival date
          time).
        $ref: '#/definitions/Period'
      scrollToken:
        type: object
        title: scrollToken
        properties:
          earlier:
            description: Token for earlier results.
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          later:
            description: Token for later results.
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
  ExchangeTravelSearchBody:
    type: object
    description: >-
      Input parameters for the search for exchange travel offers. This search
      can be performed EITHER by providing a set of search criteria OR itineray
      ids in input (schedule driven flow).
    allOf:
      - $ref: '#/definitions/TravelSearchBody'
      - type: object
        title: exchangeData
        required:
          - orderId
          - selectedTicketIds
        properties:
          orderId:
            description: Id of the order containing the selection of tickets
            type: string
            format: uuid
          selectedTicketIds:
            description: Selection of tickets to be exchanged.
            type: array
            items:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            minItems: 1
            uniqueItems: true
          overruleReason:
            $ref: '#/definitions/ReasonAfterSales'
  Fee:
    type: object
    description: Amount of money paid for a specific right or service.
    allOf:
      - $ref: '#/definitions/Money'
      - type: object
        title: feeAdditionalData
        required:
          - id
        properties:
          originalFeeAndCurrency:
            $ref: '#/definitions/Money'
          conversionRate:
            type: string
            description: >-
              Conversion rate used during booking phase to convert from amounts
              in provider's currency to amounts in client's currency.
            pattern: '^[-]?([0-9]+)([.][0-9]+)?$'
          id:
            type: string
            format: uuid
            readOnly: true
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          code:
            type: string
            pattern: '^[a-zA-Z0-9_]{1,12}$'
          description:
            type: string
          category:
            type: string
            example: DELIVERY_FEE
            enum:
              - AFTERSALES_FEE
              - BOOKING_FEE
              - DELIVERY_FEE
              - PAYMENT_FEE
  FinancialTransaction:
    type: object
    description: Financial transaction is a monetary operation related to a specific order.
    required:
      - id
    properties:
      id:
        description: >-
          Unique identifier of the financial transaction. Such record is created
          no matter the method of payment used to pay.
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      paymentRecordId:
        description: >-
          Unique identifier of the payment record generated by Amadeus Payment
          Solution. This reference is available only in case a method of payment
          using Payment Service Provider is used.
        type: string
        readOnly: true
        example: '2072032220'
      externalTransactionId:
        description: >-
          Unique identifier of the payment record generated by integrating
          Payment Service Provider. This reference is available only in case a
          method of payment using Payment Service Provider is used.
        type: string
        readOnly: true
        example: '1474163'
      confirmationDate:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Date-time in format YYYY-MM-DDTHH:MM:SS.'
      orderId:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      paymentBreakdown:
        description: Payment break down per method of payment method used.
        type: array
        items:
          $ref: '#/definitions/PaymentBreakdownItem'
      transactionType:
        type: string
        description: >-
          Payment indicates the operation with whom customers pay their trip.
          Refund indicates the opposite operation with whom customers receive
          their money back.
        example: PAYMENT
        enum:
          - PAYMENT
          - REFUND
      status:
        type: string
        example: SUCCESS
        enum:
          - SUCCESS
          - REJECTED
          - ABORTED
          - PENDING
  FormattingOptions:
    type: object
    properties:
      formattingEmailLanguage:
        type: string
        default: EN
        example: EN
        description: >-
          Language used in confirmation e-mail (format ISO 639
          https://www.iso.org/iso-639-language-codes.html).
        minLength: 2
        maxLength: 4
      formattingTicketLanguage:
        type: string
        default: EN
        example: EN
        description: >-
          Language used on the ticket (format ISO 639
          https://www.iso.org/iso-639-language-codes.html).
        minLength: 2
        maxLength: 4
  GeoCode:
    type: object
    properties:
      latitude:
        description: The latitude of this location.
        type: string
        example: '-35.319212'
      longitude:
        description: The longitude of this location.
        type: string
        example: '149.149013'
  Holder:
    type: object
    properties:
      Name:
        description: Holder's name.
        type: string
        example: Tony Stark
        maxLength: 99
        minLength: 1
      Address:
        $ref: '#/definitions/Address'
  InformationMessage:
    type: object
    description: >-
      Contains textual information on disruptions that helps to have better
      travel planning. It is available at itinerary and at segment level.
    properties:
      messageType:
        description: Code (codelist IMT) for the information message type.
        type: string
        example: '003'
      header:
        description: Free text containing the title of the information message.
        type: string
        example: Rotterdam Centraal - Antwerpen Centraal
      lead:
        description: Free text containing a summary of the information message.
        type: string
        example: Extra travel time 15-30 min.
      text:
        description: Free text containing the information.
        type: string
        example: 'Reason: due to weather conditions'
      startDateTime:
        description: Beginning of the window to which the information given applies.
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
      endDateTime:
        description: End of the window to which the information given applies.
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
  ItinerariesInInput:
    type: object
    title: itinerariesInInput
    description: 'Schedule-driven flow: searching for offers on given itineraries.'
    allOf:
      - $ref: '#/definitions/TravelOffersSearchCommonOptions'
      - type: object
        title: itinerariesInInputSpecificData
        maxProperties: 1
        properties:
          itineraryIds:
            type: array
            description: >-
              One itinerary id for single trip OR two itinerary ids for return
              trip.
            maxItems: 2
            items:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
          reconstructionIds:
            type: array
            description: >-
              One reconstruction id for single trip OR two reconstruction ids
              for return trip. Since the reconstruction id does not contain the
              search criteria information, in case Journey Options' layOverTime
              in the via station and/or incrementalChangeTime are specified in a
              previous POST /travel-offers/search with search criteria in input,
              the POST /travel-offer/search/ with reconstruction id in input
              will not include these options.
            maxItems: 2
            items:
              type: string
  Itinerary:
    type: object
    allOf:
      - $ref: '#/definitions/ItineraryBasic'
      - type: object
        title: itineraryAdditionalData
        properties:
          segments:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/Segment'
          informationMessages:
            type: array
            items:
              $ref: '#/definitions/InformationMessage'
  ItineraryBasic:
    type: object
    required:
      - id
      - origin
      - destination
      - departureDateTime
      - arrivalDateTime
      - numberOfChanges
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      reconstructionId:
        type: string
        description: Identifier from Hafas.
      origin:
        $ref: '#/definitions/Location'
      destination:
        $ref: '#/definitions/Location'
      departureDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Date-time in format YYYY-MM-DDTHH:MM:SS.'
      arrivalDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Date-time in format YYYY-MM-DDTHH:MM:SS.'
      numberOfChanges:
        type: integer
        format: int32
        example: 2
      duration:
        type: string
        example: PT4H7
        description: >-
          Duration in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      bookableStatus:
        description: >-
          Code (codelist BST) for the bookable status. This will only be
          returned when a travel offers search is performed.
        type: string
        example: PARTIALLY_BOOKABLE
      mayNotBeRideable:
        description: >-
          Indicates when set to 'true' that the itinerary may not actually be
          rideable due to real time information, e.g. due to a delay or a change
          of schedule in one of the segments.
        type: boolean
        default: false
        example: false
      bookableStarting:
        type: string
        format: date
        example: '2020-01-01'
        description: >-
          Indicative date when the booking will be available, returned only in
          case bookable status is not bookable yet (date in ISO 8601
          (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DD).
      basicTransportInformation:
        description: >-
          The elements inside the array will be ordered chronologically, the
          same way as the segments to which they are attached.
        type: array
        items:
          title: basicTransportInformation
          type: object
          properties:
            transportType:
              description: Code (codelist TCS) for the transport type for each segment.
              type: string
              example: '002'
            vehicleCategory:
              description: Code (codelist TVC) for the vehicle category.
              type: string
              example: TGV
            vehicleCode:
              description: Equipment code.
              type: string
              example: TGO
            carrierCode:
              description: Code of the carrier (codelist CRC).
              type: string
              example: SNF
              minLength: 3
              maxLength: 3
      includesANightTrain:
        description: >-
          Flag to indicate that at least one segment contains a berth and/or
          sleepers accommodation.
        type: boolean
        example: false
        default: false
      co2Emission:
        type: string
      ecoUrl:
        type: string
        format: url
        description: Provides additional information about emissions for the itinerary.
      realDepartureDateTime:
        description: Real departure date-time.
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
      realArrivalDateTime:
        description: Real arrival date-time.
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
      containsRealTimeInfo:
        description: >-
          Flag to indicate the presence of any real time information impacting
          the itinerary (such as change on departure/arrival time or platform).
          The flag is also set to true if there are information messages with an
          impact on the schedule (such as cancelled train) or a blocking segment
          status.
        type: boolean
        default: false
        example: true
  ItinerarySearchBody:
    type: object
    description: Input parameters for the itinerary request.
    maxProperties: 1
    properties:
      searchCriteria:
        type: object
        title: searchCriteriaData
        required:
          - distributor
          - origin
          - destination
        properties:
          distributor:
            description: Distributor code.
            type: string
            example: SNB
          language:
            type: string
            description: >-
              Requested language (format ISO 639-1:2002
              https://www.iso.org/iso-639-language-codes.html).
            minLength: 2
            maxLength: 2
            pattern: '^[a-zA-Z]{2}$'
            example: EN
          origin:
            description: 1A code of the requested origin station.
            type: string
            example: '8727100'
          destination:
            description: 1A code of the requested destination station.
            type: string
            example: '8727100'
          dateTime:
            description: A departure date time OR an arrival date time can be specified.
            type: object
            title: dateTimeData
            maxProperties: 1
            properties:
              departure:
                description: >-
                  Local outward departure date time in format
                  YYYY-MM-DDTHH:MM:SS.
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-03-02T08:00:00'
              arrival:
                description: 'Local outward arrival date time in format YYYY-MM-DDTHH:MM:SS.'
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-03-02T08:00:00'
          journeyOptions:
            $ref: '#/definitions/JourneyOptions'
      itinerariesInInput:
        type: object
        title: itinerariesInInputData
        required:
          - distributor
        properties:
          distributor:
            description: Distributor code.
            type: string
            example: SNB
          language:
            type: string
            description: >-
              Requested language (format ISO 639-1:2002
              https://www.iso.org/iso-639-language-codes.html).
            minLength: 2
            maxLength: 2
            pattern: '^[a-zA-Z]{2}$'
            example: EN
          reconstructionIds:
            type: array
            uniqueItems: true
            description: >-
              One reconstruction id for single trip OR two reconstruction ids
              for return trip.
            maxItems: 2
            items:
              type: string
              example: >-
                28@$201712161225$201712161305$THA
                9413$\xc2\xa7T$A=1@O=K\xc3\xb6ln
                Hbf@L=8000207@a=128@$A=1@O=Frankfurt(M) Flughafen
                Fernbf@L=8070003@a=128@$201712161310$201712161400$ICE 517
                $\xc2\xa7T$A=1@O=Frankfurt(M) Flughafen
                Fernbf@L=8070003@a=128@$A=1@O=Frankfurt(Main)Hbf@L=8000105@a=128@$201712161405$201712161435$ICE
                1651$
  ItinerarySearch:
    type: object
    description: >-
      An itinerary search represents a set of itinerary criteria and allows to
      retrieve itineraries related to this set of criteria.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      timeToLive:
        type: string
        example: PT20M
        description: >-
          Time to live in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      criteria:
        $ref: '#/definitions/ItinerarySearchBody'
      itineraries:
        description: A collection of itineraries.
        type: array
        items:
          $ref: '#/definitions/Itinerary'
      timeRange:
        description: >-
          Time range of the itineraries in response. In case of search by
          departure dateTime: - for the first request, the earliest and latest
          departure time (t1 and t2) are the ones returned by Hafas prior any
          filtering. - in case of forward scrolling (scrollLater), the earliest
          departure time is the latest date time returned in the previous
          request (t2) and the latest date time is the last date time returned
          by Hafas prior any filtering (t3). (opposite for backward scrolling)
          In case of search by arrival dateTime, the logic is the same but
          reversed (i.e. the range is about the earliest and latest arrival date
          time).
        $ref: '#/definitions/Period'
      scrollToken:
        type: object
        title: scrollToken
        properties:
          earlier:
            description: Reference for earlier results.
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          later:
            description: Reference for later results.
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
  JourneyOptions:
    type: object
    description: Optional parameters concerning the trip that can be specified.
    properties:
      maxNumberOfChanges:
        type: integer
        description: >-
          Limits the number of changes to the value set here. If it is set to
          zero, only direct trains are returned.
        minimum: 0
        example: 1
      outboundOptions:
        $ref: '#/definitions/BoundOptions'
      inboundOptions:
        $ref: '#/definitions/BoundOptions'
      transportType:
        type: object
        title: transportTypeData
        description: Selection of the wished/non wished transport type.
        properties:
          code:
            description: Code (codelist TCS) for the transport type.
            type: string
            example: '002'
          preferenceLevel:
            description: >-
              ONLY: Only itineraries matching the transport type in input in at
              least one segment are returned. PREFERRED: In case of match, only
              the matching itineraries are returned; otherwise all itineraries.
              UNACCEPTALE: All itineraries are returned but those with a
              matching transport type.
            type: string
            example: UNACCEPTABLE
            default: PREFERRED
            enum:
              - ONLY
              - PREFERRED
              - UNACCEPTABLE
      vehicleType:
        type: object
        title: vehicleTypeData
        description: Selection of the wished/non wished vehicle type.
        properties:
          code:
            description: Code (codelist TVT) for the vehicle type.
            type: string
            example: '005'
          preferenceLevel:
            description: >-
              ONLY: Only itineraries matching the vehicle type in input in at
              least one segment are returned. PREFERRED: In case of match, only
              the matching itineraries are returned; otherwise all itineraries.
              UNACCEPTALE: All itineraries are returned but those with a
              matching vehicle type.
            type: string
            example: ONLY
            default: PREFERRED
            enum:
              - ONLY
              - PREFERRED
              - UNACCEPTABLE
      vehicleCategories:
        type: object
        title: vehicleCategoriesData
        description: A list of wished/non wished vehicle categories.
        properties:
          code:
            description: Code (codelist TVC) for the vehicle category.
            type: array
            items:
              title: code
              type: string
              example: RER
          preferenceLevel:
            description: >-
              ONLY: Only itineraries containing at least one of the vehicle
              categories in input. PREFERRED: If at least one train matches,
              only the matching itineraries are returned; otherwise all
              itineraries. UNACCEPTALE: All itineraries are returned but those
              with a matching vehicle category.
            type: string
            example: UNACCEPTABLE
            default: PREFERRED
            enum:
              - ONLY
              - PREFERRED
              - UNACCEPTABLE
        example:
          code:
            - TGV
            - TGD
          preferenceLevel: ONLY
      carrier:
        type: string
        description: >-
          Code (codelist CRC) for the carrier. When specified, only itineraries
          containing the requested carrier are returned.
        example: SNF
        minLength: 3
        maxLength: 3
      withBike:
        description: If true only itineraries for which bike is allowed are returned.
        type: boolean
        default: false
        example: true
  Location:
    type: object
    required:
      - code
    properties:
      code:
        description: Only 1A codes supported.
        type: string
        example: '8758100'
      name:
        type: string
        example: Bordeaux St-Jean
      geoCode:
        $ref: '#/definitions/GeoCode'
  Loyalty:
    type: object
    allOf:
      - $ref: '#/definitions/Money'
      - type: object
        title: loyaltyAdditionalData
        description: External loyalty method of payment such as greenpoints.
        properties:
          identifier:
            type: string
            description: Loyalty card number.
            minLength: 1
            maxLength: 99
          points:
            type: string
            description: Number of loyalty points used to pay.
          program:
            type: string
            description: Used to identify if a Vendor offers different sub-programs/brands.
            minLength: 1
            maxLength: 30
          memberNumber:
            type: string
            description: Customer identifier number.
            minLength: 1
            maxLength: 30
  LoyaltyCard:
    type: object
    description: A loyalty card is a card that allows the traveler to get special fares.
    required:
      - code
      - number
    properties:
      code:
        type: string
        description: Identifier to indicate the company owner of the loyalty program.
        example: GV
      number:
        type: string
        minLength: 1
        maxLength: 45
        example: '123456789'
      expirationDate:
        type: string
        format: date
        example: '2020-01-01'
        description: 'Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DD.'
      vendorCompanyCode:
        description: Code (codelist VCC) for the vendor company.
        type: string
        example: SNF
        maxLength: 3
        minLength: 3
  MethodOfPayment:
    type: object
    description: >-
      Maximum properties are methodOfPaymentCode, notCreditable, and one of the
      following: card, bankAccount, invoice, loyalty, voucher, pointOfSale.
    maxProperties: 3
    properties:
      methodOfPaymentCode:
        description: >-
          Method of payment identifier. Code (codelist MOP) for the
          methodOfPaymentCode.
        type: string
        example: OGVI
      notCreditable:
        description: >-
          Any method of payment is by default creditable. Only in case of
          vouchers, the flag has to be set to true.
        type: boolean
        default: false
        example: false
      card:
        description: Method of payment using Payment Service Provider integration.
        $ref: '#/definitions/PaymentCard'
      bankAccount:
        description: >-
          Method of payment that uses money deposited on a bank account. It can
          be used with Payment Service Provider integration, for instance in
          case home-banking method like Sofort, Bancontact, Paypal. It can be
          used as a method of payment without payment service integration.
        $ref: '#/definitions/Account'
      invoice:
        description: Document number of the invoice
        type: string
        example: 0368005211
      loyalty:
        description: Form of Payment that represents customer loyalty.
        $ref: '#/definitions/Loyalty'
      voucher:
        description: >-
          Form of payment that entitles to a discount as a percentage, or, fixed
          amount.
        $ref: '#/definitions/Voucher'
      pointOfSale:
        title: pointOfSale
        description: >-
          Category of methods of payment accepted only at a rail station sale
          desk. The actual method of payment used is specified as a subtype.
        properties:
          subType:
            type: string
            description: Identifies the subtype of the method of payment.
            example: CASH
            enum:
              - CASH
              - DEBIT_CARD
              - CREDIT_CARD
          externalTransactionId:
            description: >-
              The transaction identifier generated by the external system, for
              instance cash desk session id.
            type: string
            maxLength: 15
            minLength: 1
            example: '10865103'
          externalReference:
            description: >-
              Tracks any additional reference, for instance the identifier of
              the application used to perform the payment.
            type: string
            maxLength: 30
            minLength: 1
            example: 0368005211
  Money:
    type: object
    required:
      - amount
    properties:
      amount:
        type: string
        example: '100.00'
        pattern: '^[-]?([0-9]+)([.][0-9]+)?$'
      currency:
        type: string
        description: 'Format ISO 4217 https://www.iso.org/iso-4217-currency-codes.html.'
        minLength: 3
        maxLength: 3
        pattern: '^[a-zA-Z]{3}$'
        example: EUR
  Name:
    type: object
    properties:
      firstName:
        type: string
        example: John
        description: First name.
        minLength: 1
      lastName:
        type: string
        example: Doe
        description: Last name.
        minLength: 1
      title:
        type: string
        description: Salutation or honorific.
        example: Mr
        minLength: 1
  OfferBasic:
    type: object
    allOf:
      - $ref: '#/definitions/OfferShared'
      - type: object
        title: offerBasicAdditionalData
        properties:
          itineraryId:
            $ref: '#/definitions/Idhref'
          totalPriceWithOptionalAccommodations:
            $ref: '#/definitions/Money'
          lowestAvailableSlots:
            description: >-
              Gives the lowest number of slots available among all the
              admissions and the mandatory accommodations contained in the
              offer.
            type: integer
            minimum: 1
            example: 17
          areReductionCardsApplied:
            description: The value by default is false.
            type: boolean
            example: false
            default: false
          areCorporateCodesApplied:
            description: The value by default is false.
            type: boolean
            example: false
            default: false
          travelClassLabels:
            type: array
            items:
              $ref: '#/definitions/TravelClassLabel'
          ticketingOptions:
            type: array
            uniqueItems: true
            items:
              title: ticketingOption
              type: object
              properties:
                ticketType:
                  description: Code (codelist TTY) for the ticket type.
                  type: string
                  example: '001'
          containsIncludedAncillaries:
            type: boolean
            description: Indicator for offers containing included ancillaries.
            example: false
            default: false
  OfferProposed:
    type: object
    description: >-
      An offer is a cohesive bundle of admissions, accommodations and
      ancillaries which corresponds to a global sellable solution for specified
      itinerary and travelers.
    allOf:
      - $ref: '#/definitions/OfferBasic'
      - type: object
        title: offerProposedAdditionalData
        properties:
          travelers:
            type: array
            items:
              $ref: '#/definitions/Traveler'
          accommodations:
            type: array
            items:
              $ref: '#/definitions/Accommodation'
          admissions:
            type: array
            items:
              $ref: '#/definitions/Admission'
          ancillaries:
            type: array
            items:
              $ref: '#/definitions/Ancillary'
  OfferSelected:
    type: object
    description: >-
      An offer is a cohesive bundle of admissions, accommodations and
      ancillaries which corresponds to a global sellable solution for specified
      itinerary and travelers.
    allOf:
      - $ref: '#/definitions/OfferShared'
      - type: object
        title: offerSelectedAdditionalData
        properties:
          accommodations:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/Accommodation'
          admissions:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/Admission'
          ancillaries:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/AncillarySelected'
          cardAndPasses:
            type: array
            items:
              $ref: '#/definitions/CardAndPass'
          itineraryId:
            $ref: '#/definitions/Idhref'
          exchangeData:
            $ref: '#/definitions/ExchangeData'
  OfferShared:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      direction:
        description: >-
          Flag to indicate the direction of the itinerary to which the offer is
          associated.
        type: string
        example: OUTWARD
        enum:
          - OUTWARD
          - INWARD
      totalPrice:
        $ref: '#/definitions/Money'
      flexibilityLevel:
        description: Code (codelist RFB) for the flexibility.
        type: string
        example: '002'
      withRestrictions:
        description: >-
          Used for flagging offers that have constraints for booking as, for
          example, return products that can only be booked with the compatible
          outward offer. The value by default is FALSE meaning that the field is
          not returned.
        type: boolean
        example: false
        default: false
      accommodationCategory:
        description: Code (codelist ACT) for the accommodation category.
        type: string
        example: '002'
      accommodationPreferences:
        type: array
        description: >-
          If some preferences are available for all travelers and some
          preferences are available for each traveler, two preferences items are
          returned here.
        minItems: 0
        items:
          $ref: '#/definitions/AccommodationPreferences'
      globalTravelClass:
        description: >-
          Travel class for the whole offer, computed from the travel classes of
          the proposed products. Either 1st or 2nd.
        type: object
        properties:
          code:
            type: string
            description: Code of the travel class (1st or 2nd) from the codelist TCC.
            example: '001'
          rank:
            type: integer
            description: >-
              Numerical value indicating the luxury level of the travel class:
              the smallest value (11) indicates the most prestigious travel
              class. Codelist TCR.
            example: 11
      globalReservationStatus:
        description: >-
          Defines the global reservation's availability status. If it is set to
          Overbooking, at least one admission or one standalone accommodation is
          in overbooking mode.
        type: string
        enum:
          - OVERBOOKING
        example: OVERBOOKING
      tags:
        description: >-
          Concatenation without repetition of the tags of the products composing
          the offer.
        type: array
        uniqueItems: true
        items:
          type: string
  Order:
    type: object
    description: >-
      An order is a container used to store order items booked on provider side,
      as well as ticketing, payment and actors information.
    allOf:
      - $ref: '#/definitions/OrderCommonData'
      - type: object
        title: OrderAdditionalData
        properties:
          ticketTimeLimit:
            $ref: '#/definitions/TicketTimeLimit'
          bookingCountry:
            description: >-
              Buyer's country code (format ISO 3166-1
              https://www.iso.org/iso-3166-country-codes.html).
            type: string
            minLength: 2
            maxLength: 2
            pattern: '^[a-zA-Z]{2}$'
            example: BE
          ticketingOptions:
            type: array
            items:
              $ref: '#/definitions/TicketingOptions'
          actors:
            type: array
            items:
              $ref: '#/definitions/Actor'
          orderItems:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/OrderItem'
          tickets:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/TicketInfo'
          exchangeSelection:
            $ref: '#/definitions/ExchangeSelection'
          fees:
            type: array
            items:
              $ref: '#/definitions/Fee'
            maxItems: 99
          totalPrice:
            $ref: '#/definitions/Price'
          paymentOptions:
            type: array
            items:
              $ref: '#/definitions/PaymentOption'
          corporateCodes:
            type: array
            maxItems: 1
            items:
              title: corporateCode
              required:
                - code
              type: object
              properties:
                code:
                  type: string
                  description: The corporate ID code.
                  minLength: 1
                  maxLength: 20
                vendorCompanyCode:
                  description: Code (codelist VCC) for the vendor company.
                  type: string
                  example: SNF
                actorId:
                  type: string
                  format: uuid
          references:
            type: array
            description: >-
              Stores customer references. Some predefined keys can be used for
              indexing.
            maxItems: 100
            items:
              title: keyValue
              type: object
              properties:
                key:
                  type: string
                  description: A reference key is unique.
                  maxLength: 20
                  minLength: 1
                value:
                  type: string
                  maxLength: 100
                  minLength: 1
                category:
                  type: string
                  example: BASIC
                  default: BASIC
                  enum:
                    - TRAVEL_AGENCY_BO_FEED
                    - BASIC
                  description: >
                    Reference category: * TRAVEL_AGENCY_BO_FEED - The reference
                    is stored and goes into travel agency back office feed. *
                    BASIC - Default value. The reference is simply stored.
          remarks:
            type: array
            description: Stores remarks.
            maxItems: 100
            items:
              title: remark
              type: object
              properties:
                value:
                  type: string
                  maxLength: 100
                  minLength: 1
                category:
                  type: string
                  example: BASIC
                  default: BASIC
                  enum:
                    - TRAVEL_AGENCY_BO_FEED
                    - BASIC
                  description: >
                    Remark category: * TRAVEL_AGENCY_BO_FEED - The remark is
                    stored and goes into travel agency back office feed. * BASIC
                    - Default value. The reference is simply stored.
          documents:
            type: array
            items:
              $ref: '#/definitions/DocumentInformation'
          recipientEmails:
            $ref: '#/definitions/RecipientEmails'
  OrderCommonData:
    type: object
    title: OrderCommonData
    description: >-
      This is a subset of order and order preview, containing the common fields
      (that are having same definition and same structure).
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
      pnrRecordLocator:
        type: string
        description: Amadeus PNR record locator.
      state:
        type: object
        title: state
        properties:
          locked:
            description: >-
              When true, no other operation than retrieve can be performed on
              the order or its sub-resources.
            type: boolean
            example: false
            default: false
          ticketing:
            type: string
            example: TICKETED
            readOnly: true
            enum:
              - ON_GOING
              - NOT_STARTED
              - TICKETED
              - PARTIALLY_TICKETED
              - ERROR
          payment:
            type: string
            example: CONFIRMED
            readOnly: true
            enum:
              - PENDING
              - CONFIRMED
              - REFUSED
              - ERROR
              - NOT_STARTED
          ticketDocumentCreation:
            type: object
            title: ticketDocumentCreation
            description: Status of the ticket document creation operation.
            properties:
              status:
                type: string
                example: COMPLETED
                readOnly: true
                enum:
                  - NOT_STARTED
                  - PENDING
                  - COMPLETED
                  - ERROR
              orderItemIds:
                description: >-
                  Order items for which tickets could not be generated. This
                  field is used only in case of ERROR.
                type: array
                uniqueItems: true
                items:
                  $ref: '#/definitions/Idhref'
          emailDocumentCreation:
            type: object
            title: emailDocumentCreation
            description: Status of the email document creation operation.
            properties:
              status:
                type: string
                example: COMPLETED
                readOnly: true
                enum:
                  - NOT_STARTED
                  - PENDING
                  - COMPLETED
                  - ERROR
          paperDocumentCreation:
            type: object
            title: paperDocumentCreation
            description: Status of the paper document creation operation.
            properties:
              status:
                type: string
                example: COMPLETED
                readOnly: true
                enum:
                  - NOT_STARTED
                  - PENDING
                  - COMPLETED
                  - ERROR
              orderItemIds:
                description: >-
                  Order items for which paper documents could not be generated.
                  This field is used only in case of ERROR.
                type: array
                uniqueItems: true
                items:
                  $ref: '#/definitions/Idhref'
          exchangeInProgress:
            description: 'When true, an exchange is in progress pending action/update.'
            type: boolean
            example: false
            default: false
          cleanUp:
            type: string
            example: OPTIONAL
            description: Flag to define if the cleanUp is required or not.
            enum:
              - OPTIONAL
              - REQUIRED
      lastUpdateDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-03-02T08:00:00'
        description: >-
          Addresses the last time the order has been modified. Date-time in
          format YYYY-MM-DDTHH:MM:SS.
      creationDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-03-02T08:00:00'
        description: >-
          Addresses the time the order has been created. Date-time in format
          YYYY-MM-DDTHH:MM:SS.
  OrderPreview:
    type: object
    description: >-
      This is a subset of order, fields are having same definition and same
      structure as order, but having less attributes.
    allOf:
      - $ref: '#/definitions/OrderCommonData'
      - type: object
        title: OrderPreviewAdditionalData
        properties:
          ticketTimeLimit:
            type: object
            title: ticketTimeLimit
            properties:
              effectiveTicketTimeLimit:
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-01-17T08:32:00'
                readOnly: true
                description: >-
                  Effective ticket time limit used for cancelling. If order is
                  not ticketed before this datetime, the whole order will be
                  cancelled. (Date-time in format YYYY-MM-DDTHH:MM:SS).
          actors:
            type: array
            uniqueItems: true
            items:
              type: object
              title: actors
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                roles:
                  type: array
                  description: Role(s) of the actor.
                  uniqueItems: true
                  items:
                    type: string
                    example: TRAVELER
                    enum:
                      - TRAVELER
                      - PAYER
                      - BUYER
          orderItems:
            type: array
            uniqueItems: true
            items:
              type: object
              title: orderItem
              properties:
                id:
                  type: string
                itinerary:
                  type: object
                  properties:
                    origin:
                      $ref: '#/definitions/Location'
                    destination:
                      $ref: '#/definitions/Location'
                    departureDateTime:
                      type: string
                      pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                      example: '2017-01-17T08:32:00'
                      description: 'Date-time in format YYYY-MM-DDTHH:MM:SS.'
                    status:
                      type: string
                      example: BOOKED
                      description: Status of the travel.
                      enum:
                        - BOOKED
                        - TICKETED
                        - RELEASED
                        - PARTIALLY_RELEASED
                      readOnly: true
          totalPrice:
            $ref: '#/definitions/Money'
          references:
            type: array
            description: >-
              Stores customer references. Some predifined keys can be used for
              indexing and search.
            uniqueItems: true
            items:
              title: keyValue
              type: object
              properties:
                key:
                  description: A reference key is unique.
                  type: string
                value:
                  type: string
  OrderItem:
    type: object
    description: >-
      An order item is a cohesive bundle of admissions, accommodations and
      ancillaries which corresponds to a global sellable solution for specified
      itinerary and travelers.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      direction:
        description: >-
          Flag to indicate the direction of the itinerary to which the offer is
          associated.
        type: string
        example: OUTWARD
        enum:
          - OUTWARD
          - INWARD
      totalPrice:
        $ref: '#/definitions/Money'
      offerGlobalTravelClass:
        description: Value is kept from offer globalTravelClass.
        type: object
        properties:
          code:
            type: string
            description: Value is kept from offer globalTravelClass.
            example: '001'
          rank:
            type: integer
            description: Value is kept from offer globalTravelClass.
            example: 11
      offerAccommodationCategory:
        description: Value is kept from offer accommodationCategory.
        type: string
        example: '002'
      offerFlexibilityLevel:
        description: Value is kept from offer flexibilityLevel.
        type: string
        example: '002'
      globalReservationStatus:
        description: >-
          Defines the global reservation's availability status. If it is set to
          Overbooking, at least one admission is in overbooking mode.
        type: string
        enum:
          - OVERBOOKING
        example: OVERBOOKING
      groupReference:
        type: string
        description: >-
          Common reference used to identify order items that have been booked or
          grouped together.
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      status:
        type: string
        example: BOOKED
        description: Status of the travel.
        enum:
          - BOOKED
          - TICKETED
          - RELEASED
          - PARTIALLY_RELEASED
        readOnly: true
      itinerary:
        $ref: '#/definitions/Itinerary'
      accommodations:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/AccommodationBooked'
      admissions:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Admission'
      ancillaries:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/AncillaryBooked'
      cardAndPasses:
        type: array
        items:
          $ref: '#/definitions/CardAndPass'
      offerTags:
        description: Value is kept from offer tags.
        type: array
        items:
          type: string
      segmentsWithoutProducts:
        type: array
        description: >-
          Segments for which no admission, accommodation, ancillary are
          returned.
        items:
          title: segmentWithoutProduct
          type: object
          properties:
            segmentId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            departureStation:
              $ref: '#/definitions/Location'
            arrivalStation:
              $ref: '#/definitions/Location'
            bookableStatus:
              description: >-
                Code (codelist BST) for the bookable status.This will only be
                returned when a travel offers search is performed.
              type: string
              example: PARTIALLY_BOOKABLE
            transportType:
              description: Code (codelist TCS) for the transport type.
              type: string
              example: '002'
      cleanUp:
        type: string
        example: OPTIONAL
        description: Flag to define if the cleanUp is required or not.
        enum:
          - OPTIONAL
          - REQUIRED
      cleanUpContext:
        type: string
        example: EXCHANGE
        description: >-
          Flag to define if the cleanUp is for exchange or booking context. If
          the flag is present, this means that the cleanUp process is ongoing.
        enum:
          - EXCHANGE
          - BOOKING
  PaymentBreakdownAmount:
    type: object
    maxProperties: 1
    properties:
      amount:
        $ref: '#/definitions/Money'
      refundedAmount:
        $ref: '#/definitions/Money'
  PaymentBreakdownItem:
    type: object
    minProperties: 2
    maxProperties: 2
    allOf:
      - $ref: '#/definitions/PaymentBreakdownAmount'
      - type: object
        properties:
          methodOfPayment:
            $ref: '#/definitions/MethodOfPayment'
          refundedTransactionId:
            description: >-
              Unique identifier of the payment transaction that has been
              refunded.
            $ref: '#/definitions/Idhref'
  PaymentCard:
    type: object
    description: Credit or Debits cards.
    properties:
      vendorCode:
        type: string
        example: VI
        description: >-
          Two-letter code card type or vendor code. E.g. VI for VISA, MA for
          MasterCard.
        maxLength: 30
        minLength: 0
      startValidityDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
      endValidityDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
      maskedCardNumber:
        description: Masked card number.
        type: string
      holder:
        $ref: '#/definitions/Holder'
  PaymentOption:
    type: object
    description: >-
      A payment option represents an available method of payment, including
      additional information.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      methodOfPayment:
        $ref: '#/definitions/MethodOfPayment'
      selected:
        type: boolean
        default: false
        example: true
      fee:
        readOnly: true
        $ref: '#/definitions/Fee'
      total:
        $ref: '#/definitions/Money'
  PaymentTransaction:
    type: object
    description: >-
      The payment transaction represents the actual exchange of money between
      the payer and distributor.
    properties:
      paymentUrl:
        type: string
        format: url
  Period:
    type: object
    description: Defined space of time.
    required:
      - startDateTime
      - endDateTime
    properties:
      startDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
      endDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
  PhoneNumber:
    type: object
    description: Phone information.
    required:
      - number
    properties:
      category:
        description: Category of the contact element.
        type: string
        example: BUSINESS
        enum:
          - BUSINESS
          - PERSONAL
          - OTHER
      countryCallingCode:
        type: string
        example: '+1'
        description: >-
          Country calling code of the phone number, as defined by the
          International Communication Union.
        pattern: '[0-9+]{2,5}'
      number:
        type: string
        example: '123456789'
        description: >-
          Phone number. Composed of digits only. The number of digits depends on
          the country.
        pattern: '[0-9]{1,15}'
  Price:
    type: object
    properties:
      currency:
        type: string
        description: Currency code.
      total:
        description: >-
          The sum of all charges present in the order paid or unpaid. It
          includes fees and taxes if any.
        type: string
        pattern: '^[-]?([0-9]+)([.][0-9]+)?$'
      originalTotalAndCurrency:
        $ref: '#/definitions/Money'
      conversionRate:
        type: string
        description: >-
          Conversion rate used during booking phase to convert from amounts in
          provider's currency to amounts in client's currency.
        pattern: '^[-]?([0-9]+)([.][0-9]+)?$'
      totalTaxes:
        description: The sum of the cost of all taxes.
        type: string
        pattern: '^[-]?([0-9]+)([.][0-9]+)?$'
      originalTotalTaxes:
        description: The sum of the cost of all taxes before currency conversion.
        $ref: '#/definitions/Money'
      totalFees:
        description: The sum of the cost of all fees.
        type: string
        pattern: '^[-]?([0-9]+)([.][0-9]+)?$'
      originalTotalFees:
        description: The sum of the cost of all fees before currency conversion.
        $ref: '#/definitions/Money'
      taxes:
        type: array
        items:
          $ref: '#/definitions/Tax'
        maxItems: 99
  Product:
    type: object
    allOf:
      - $ref: '#/definitions/ProductShared'
      - type: object
        title: productAdditionalData
        properties:
          description:
            type: string
          linkedSegments:
            type: array
            items:
              title: linkedSegment
              type: object
              properties:
                segmentId:
                  type: string
                  format: uuid
                isFeeder:
                  description: >-
                    The value by default is FALSE meaning that the field is not
                    returned.
                  type: boolean
                  example: true
                  default: false
          travelClass:
            description: 'Travel class for the product, either 1st or 2nd.'
            type: object
            properties:
              code:
                type: string
                description: Code of the travel class (1st or 2nd) from the codelist TCC.
                example: '001'
              rank:
                type: integer
                description: >-
                  Numerical value indicating the luxury level of the travel
                  class: the smallest value (11) indicates the most prestigious
                  travel class (Codelist TCR).
                example: 11
          travelClassLabel:
            $ref: '#/definitions/TravelClassLabel'
          ticketingOptions:
            type: array
            uniqueItems: true
            items:
              title: ticketOption
              type: object
              properties:
                ticketType:
                  description: Code (codelist TTY) for the ticket type.
                  type: string
                  example: '001'
  ProductOptions:
    type: object
    properties:
      travelClass:
        description: >-
          Code (codelist TCC) for the wished travel class. If nothing is
          specified, first and second are returned by default. If provided and
          no proposals are available for one or more itineraries, no offer is
          returned but ALL the itineraries are returned. If no proposals for all
          the itineraries a warning message is also returned: NO FARE RETURNED
          FOR THIS SPECIFIC SEARCH.
        type: string
        example: '001'
      flexibilities:
        type: array
        items:
          description: Codes (codelist RFB) for the wished flexibilities.
          type: string
          example: '003'
      productCodes:
        description: Product codes.
        type: object
        title: productCode
        properties:
          productCode:
            type: array
            items:
              title: code
              type: string
              example: KNGN
          preferenceLevel:
            description: >-
              The following preference levels are possible. Only: only the
              product codes specified are returned; Preferred: if none of the
              requested codes are found for a certain travel-offer, other
              products can be returned for this travel-offer;  or Unacceptable:
              the product codes specified must be filtered out.
            type: string
            example: ONLY
            default: PREFERRED
            enum:
              - ONLY
              - PREFERRED
              - UNACCEPTABLE
      productFamilies:
        description: 'Product family codes (codelist FFL). For example: RIT (011).'
        type: object
        title: productFamily
        properties:
          productFamily:
            type: array
            items:
              title: code
              type: string
              example: '006'
          preferenceLevel:
            description: >-
              The following preference levels are possible. Only: only the
              product families specified are returned; Preferred: if none of the
              requested product families are found for a certain segment and
              category (combination of flexibility level, travel class and
              accommodation type), other products can be returned.
            type: string
            example: PREFERRED
            default: PREFERRED
            enum:
              - ONLY
              - PREFERRED
  ProductShared:
    type: object
    properties:
      code:
        type: string
        example: FA00
      flexibility:
        description: Code (codelist RFB) for the flexibility.
        type: string
        example: '002'
      productCharacteristics:
        description: Code (codelist SRT) for the features of the product.
        type: array
        items:
          type: string
          example: '003'
      family:
        description: >-
          Product family codes (codelist FFL). For example, Business (006),
          Leisure (007).
        type: string
        example: '006'
      travelersRestrictions:
        type: object
        title: minMax
        properties:
          min:
            type: integer
            minimum: 0
            example: 1
          max:
            type: integer
            minimum: 0
            example: 5
      travelPeriodRestrictions:
        type: object
        title: travelPeriodRestrictions
        description: >-
          Returns restrictions on the validity which can be number of days
          and/or a validity period.
        properties:
          minDays:
            type: integer
            minimum: 0
            example: 1
          maxDays:
            type: integer
            minimum: 0
            example: 5
          startDate:
            description: The beginning date of the validity period.
            type: string
            format: date
            example: '2017-09-08'
          endDate:
            description: Final date of the validity period.
            type: string
            format: date
            example: '2017-09-08'
      conditions:
        type: array
        items:
          title: condition
          type: object
          properties:
            conditionType:
              description: Code (codelist PCT) for the condition type.
              type: string
              example: '021'
            condition:
              type: string
            externalLink:
              type: string
              format: url
              description: URL of external partner to have more details.
      tags:
        description: >-
          Each product can have one or more tags to further characterize them.
          For example, identify best deal offers for a specific flexibility
          level.
        type: array
        uniqueItems: true
        items:
          type: string
      serviceProvider:
        type: string
        description: The external partner providing the service.
      appliedReductions:
        $ref: '#/definitions/Reduction'
  ProductTicketed:
    type: object
    allOf:
      - $ref: '#/definitions/ProductShared'
      - type: object
        title: productTicketedAdditionalData
        properties:
          travelClass:
            description: >-
              Code (codelist TCC) for the travel class. If provided and no
              proposals are available for one or more itineraries, no offer is
              returned but ALL the itineraries are returned. If no proposals for
              all the itineraries a warning message is also returned: NO FARE
              RETURNED FOR THIS SPECIFIC SEARCH.
            type: string
            example: '001'
          providerTravelClass:
            description: >-
              Some providers may return more travel classes than the standard
              ones. In this case, they will be mapped and this field will keep
              the original class returned by the provider.
            type: string
          description:
            type: string
          linkedSegments:
            type: array
            uniqueItems: true
            items:
              title: linkedSegment
              type: object
              properties:
                segment:
                  $ref: '#/definitions/Segment'
                isFeeder:
                  type: boolean
                  example: false
  PspOptions:
    type: object
    description: Payment settings for the payment service provider.
    properties:
      successUrl:
        type: string
      refusedUrl:
        description: Payment server provider refuses payment transaction.
        type: string
      declinedUrl:
        description: Payment transaction deletion triggered by API user.
        type: string
      exceptionUrl:
        type: string
      language:
        description: >-
          Payment page language, a code that follows format ISO 639
          https://www.iso.org/iso-639-language-codes.html.
        type: string
        example: EN
        minLength: 2
        maxLength: 4
      aliasId:
        type: string
        maxLength: 50
      aliasUsage:
        type: string
      3DSecure:
        type: boolean
      customerEmail:
        type: string
        maxLength: 50
      customerName:
        type: string
        maxLength: 35
      customerId:
        type: string
        maxLength: 50
      templateName:
        type: string
      title:
        type: string
  ReasonAfterSales:
    type: string
    description: >-
      Reason's code to be used for the refund or exchange. Involuntary reason
      codes are : STRIKE in the situation of a strike, APPROVED_BY_PROVIDER when
      the distributor's conditions allow it, OPERATOR_ERROR in the situation of
      an error from the agent, EQUIPMENT_FAILURE in the situation of an
      operational problem of the transporter, MANUAL_OVERRIDE when allowed by
      the inventory and BOARDING_PASS to enforce the exchange to a boarding
      pass.
    example: MANUAL_OVERRIDE
    enum:
      - STRIKE
      - APPROVED_BY_PROVIDER
      - OPERATOR_ERROR
      - EQUIPMENT_FAILURE
      - MANUAL_OVERRIDE
      - BOARDING_PASS
  RecipientEmails:
    type: object
    properties:
      roles:
        type: array
        uniqueItems: true
        minItems: 1
        maxItems: 2
        items:
          type: string
          enum:
            - BUYER
            - TRAVELER
            - ''
          description: >-
            Identifies the role(s) of the ticket recipient(s). In case the
            recipient is BUYER, a global confirmation e-mail is sent; in case
            the recipient is TRAVELER, single passenger confirmation e-mail is
            sent; in case the recipient is an empty string, no confirmation
            e-mail is sent. Empty string cannot be combined with other items.
          default: TRAVELER
          example: BUYER
      ccEmails:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          example: test@test.com
      formattingLanguage:
        type: string
        description: >-
          Language used to send the emails (format ISO 639
          https://www.iso.org/iso-639-language-codes.html).
        example: EN
        default: EN
        minLength: 2
        maxLength: 4
  Reduction:
    type: object
    description: >-
      A reduction is the entitlement that a traveler must have in order to
      access a specific discounted product, such as railcards, corporate
      contracts, campaign codes. All items under it is modifiable only before
      selecting offer.
    properties:
      reductionCards:
        type: array
        items:
          $ref: '#/definitions/ReductionCard'
      corporateCodes:
        type: array
        items:
          title: corporateCode
          type: object
          properties:
            code:
              type: string
              description: The corporate ID code.
              minLength: 1
              maxLength: 20
            vendorCompanyCode:
              description: Code (codelist VCC) for the vendor company.
              type: string
      campaignCodes:
        type: array
        items:
          title: campaignCode
          type: object
          properties:
            code:
              type: string
              example: RKT17
              minLength: 1
              maxLength: 20
            vendorCompanyCode:
              description: Code (codelist VCC) for the vendor company.
              type: string
              example: ERS
      nonAgeRelatedTravelerCategories:
        description: Code (codelist NPC) for the non age related traveler categories.
        type: array
        items:
          type: string
          example: '004'
  ReductionCard:
    type: object
    description: A reduction card is a card that allows the traveler to get discounts.
    required:
      - code
    properties:
      code:
        type: string
        description: >-
          1A railcard code. Card's Code is only useful at Shopping time. Please
          refer to the Reduction cards list
        example: ESCA
      number:
        type: string
        minLength: 1
        maxLength: 45
        example: '123456789'
      vendorCompanyCode:
        description: Code (codelist VCC) for the vendor company.
        type: string
        example: SNF
        maxLength: 3
        minLength: 3
  Refund:
    type: object
    description: >-
      Refund is a cohesive bundle of total amounts and the breakdown of amounts
      per refundable, non refundable and repriced tickets
    properties:
      refundAmounts:
        $ref: '#/definitions/RefundTotalAmounts'
      refundedTickets:
        $ref: '#/definitions/RefundableTickets'
      nonRefundableTickets:
        type: array
        description: Non refundable tickets which were not refunded.
        items:
          type: object
          title: nonRefundableTicket
          properties:
            ticketId:
              $ref: '#/definitions/Idhref'
            ticketValue:
              $ref: '#/definitions/Money'
            originalTicketValue:
              $ref: '#/definitions/Money'
              description: Original stands for ticket value in provider's currency.
      repricedTickets:
        type: array
        description: Tickets automatically repriced and exchanged.
        items:
          type: object
          title: repricedTicket
          properties:
            repricedTicketId:
              $ref: '#/definitions/Idhref'
            linkedTicketId:
              $ref: '#/definitions/Idhref'
            ticketValue:
              $ref: '#/definitions/Money'
            originalTicketValue:
              $ref: '#/definitions/Money'
              description: Original stands for ticket value in provider's currency.
            penalty:
              $ref: '#/definitions/Money'
            originalPenalty:
              $ref: '#/definitions/Money'
              description: Original stands for penalty in provider's currency.
            additionalFareAmount:
              $ref: '#/definitions/Money'
            originalAdditionalFareAmount:
              $ref: '#/definitions/Money'
              description: >-
                Original stands for additional fare amount in provider's
                currency.
            newTicketId:
              $ref: '#/definitions/Idhref'
      financialTransactionId:
        $ref: '#/definitions/Idhref'
  RefundableTickets:
    type: array
    items:
      type: object
      title: refundableTicket
      description: Refundable ticket and associated refund amounts.
      properties:
        ticketId:
          $ref: '#/definitions/Idhref'
        ticketValue:
          $ref: '#/definitions/Money'
        originalTicketValue:
          $ref: '#/definitions/Money'
        penalty:
          $ref: '#/definitions/Money'
        originalPenalty:
          $ref: '#/definitions/Money'
        refundedAmount:
          $ref: '#/definitions/Money'
        originalRefundedAmount:
          $ref: '#/definitions/Money'
        endOfProbationDate:
          type: string
          pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
          example: '2017-01-17T08:32:00'
  RefundConditions:
    type: object
    description: >-
      Refund conditions are cohesive bundle of total amounts and the breakdown
      of amounts per refundable, non refundable and repriced tickets.
    properties:
      refundAmounts:
        $ref: '#/definitions/RefundTotalAmounts'
      refundableTickets:
        $ref: '#/definitions/RefundableTickets'
      conversionRate:
        type: string
        description: >-
          Conversion rate used during booking phase to convert from amounts in
          provider's currency to amounts in client's currency.
        pattern: '^([0-9]+)([.][0-9]+)?$'
      nonRefundableTickets:
        type: array
        description: Non refundable tickets which can only be refunded with overrule.
        items:
          type: object
          title: nonRefundableTicket
          properties:
            ticketId:
              $ref: '#/definitions/Idhref'
            ticketValue:
              $ref: '#/definitions/Money'
            originalTicketValue:
              $ref: '#/definitions/Money'
      repricedTickets:
        type: array
        description: Tickets automatically repriced.
        items:
          type: object
          title: repricedTicket
          properties:
            repricedTicketId:
              $ref: '#/definitions/Idhref'
            linkedTicketId:
              $ref: '#/definitions/Idhref'
            ticketValue:
              $ref: '#/definitions/Money'
            originalTicketValue:
              $ref: '#/definitions/Money'
            penalty:
              $ref: '#/definitions/Money'
            originalPenalty:
              $ref: '#/definitions/Money'
            additionalFareAmount:
              $ref: '#/definitions/Money'
            originalAdditionalFareAmount:
              $ref: '#/definitions/Money'
  RefundTotalAmounts:
    type: object
    properties:
      refundableTicketsValue:
        $ref: '#/definitions/Money'
        description: Total value of the refundable tickets.
      originalRefundableTicketsValue:
        $ref: '#/definitions/Money'
        description: Total provider's value of the refundable tickets.
      nonRefundableTicketsValue:
        $ref: '#/definitions/Money'
        description: Total value of the non refundable tickets.
      originalNonRefundableTicketsValue:
        $ref: '#/definitions/Money'
        description: Total provider's value of the non refundable tickets.
      totalRefundPenalty:
        $ref: '#/definitions/Money'
        description: Total refund penalty or refundable tickets.
      originalTotalRefundPenalty:
        $ref: '#/definitions/Money'
        description: Total provider's refund penalty or refundable tickets.
      totalRepricePenalty:
        $ref: '#/definitions/Money'
        description: Total exchange penalty of repriced tickets.
      originalTotalRepricePenalty:
        $ref: '#/definitions/Money'
        description: Total provider's exchange penalty of repriced tickets.
      totalRepriceAdditionalFareAmount:
        $ref: '#/definitions/Money'
        description: Total exchange price difference of repriced tickets.
      originalTotalRepriceAdditionalFareAmount:
        $ref: '#/definitions/Money'
        description: Total provider's exchange price difference of repriced tickets.
      totalRefundedAmount:
        $ref: '#/definitions/Money'
        description: Total resulting amount for the operation.
      originalTotalRefundedAmount:
        $ref: '#/definitions/Money'
        description: Total provider's resulting amount for the operation.
      refundBreakdownPerMethodOfPayment:
        description: Amount breakdown per method of payment.
        type: array
        items:
          $ref: '#/definitions/PaymentBreakdownItem'
      financialTransactions:
        description: 'Financial transaction, in the situation where it is pending.'
        type: array
        items:
          $ref: '#/definitions/Idhref'
  SearchCriteria:
    type: object
    title: searchCriteria
    allOf:
      - $ref: '#/definitions/TravelOffersSearchCommonOptions'
      - type: object
        title: searchCriteriaSpecificData
        required:
          - origin
          - destination
          - dateTime
        description: 'Fare-driven flow: searching for itineraries and offers.'
        properties:
          origin:
            type: string
            description: 1A code of the requested origin station.
            example: '8727100'
          destination:
            type: string
            description: 1A code of the requested destination station.
            example: '8727100'
          dateTime:
            description: A departure date time OR an arrival date time can be specified.
            type: object
            title: dateTime
            maxProperties: 1
            properties:
              departure:
                description: >-
                  Local outward departure date time in format
                  YYYY-MM-DDTHH:MM:SS.
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-03-02T08:00:00'
              arrival:
                description: 'Local outward arrival date time in format YYYY-MM-DDTHH:MM:SS.'
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-03-02T08:00:00'
          returnDateTime:
            description: A departure date time OR an arrival date time can be specified.
            type: object
            title: returnDateTime
            maxProperties: 1
            properties:
              departure:
                description: >-
                  Local inward departure date time in format
                  YYYY-MM-DDTHH:MM:SS.
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-03-02T08:00:00'
              arrival:
                description: 'Local inward arrival date time in format YYYY-MM-DDTHH:MM:SS.'
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                example: '2017-03-02T08:00:00'
          journeyOptions:
            $ref: '#/definitions/JourneyOptions'
  SecurePaperState:
    type: string
    default: NOT_PRINTED
    example: NOT_PRINTED
    description: Used in case of secure paper ticket. To be updated by end-users.
    enum:
      - PRINTED
      - ERROR
      - NOT_PRINTED
      - NOT_APPLICABLE
  Segment:
    type: object
    required:
      - id
      - transportType
      - departureStation
      - departureDateTime
      - arrivalStation
      - arrivalDateTime
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      transportType:
        description: Code (codelist TCS) for the transport type of the segment.
        type: string
        example: '002'
      departureStation:
        $ref: '#/definitions/Location'
      departureDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local departure date-time in format YYYY-MM-DDTHH:MM:SS.'
      arrivalStation:
        $ref: '#/definitions/Location'
      arrivalDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local arrival date-time in format YYYY-MM-DDTHH:MM:SS.'
      duration:
        type: string
        example: PT4H7
        description: >-
          Duration in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      vehicle:
        $ref: '#/definitions/Vehicle'
      carrierCode:
        description: Code of the carrier (codelist CRC).
        type: string
        example: SNF
        minLength: 3
        maxLength: 3
      servicesOnBoard:
        type: array
        items:
          $ref: '#/definitions/ServiceOnBoard'
      co2Emission:
        type: string
      scheduleToBeConfirmed:
        description: >-
          Flag to notify the user that a telephone number should be entered so
          that the traveler can be informed in case of delay. The value by
          default is FALSE meaning that the field is not returned.
        type: boolean
        default: false
        example: true
      departureTrack:
        type: string
        example: A
      arrivalTrack:
        type: string
        example: '20'
      distance:
        description: Distance in meters.
        type: integer
        minimum: 0
        example: 10000
      stopStations:
        type: array
        items:
          $ref: '#/definitions/StopStation'
      bookableStatus:
        description: >-
          Code (codelist BST) for the bookable status. This will only be
          returned when a travel offers search is performed.
        type: string
        example: NOT_BOOKABLE_TRANSFER
      bookableStarting:
        type: string
        format: date
        example: '2020-01-01'
        description: >-
          Indicative date when the booking will be available, returned only in
          case bookable status is not bookable yet (date in ISO 8601
          (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DD).
      realDepartureDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local departure date-time in format YYYY-MM-DDTHH:MM:SS.'
      realDepartureTrack:
        type: string
      realArrivalDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local arrival date-time in format YYYY-MM-DDTHH:MM:SS.'
      realArrivalTrack:
        type: string
      informationMessages:
        type: array
        items:
          $ref: '#/definitions/InformationMessage'
      status:
        type: string
        description: Code (codelist RTS) for the real time segment status.
        example: RTS
  ServiceOnBoard:
    type: object
    description: >-
      Services provided by the carrier on board of the vehicle. For example:
      minibar, restaurant, DVD rental and so on.
    required:
      - code
    properties:
      code:
        description: Code (codelist SOB) for the service on board provided.
        type: string
        example: '003'
  StationTimetable:
    type: object
    required:
      - timetableType
    properties:
      referenceStation:
        $ref: '#/definitions/Location'
      timetableType:
        description: >-
          Indicates if it is a departure or arrival timetable. Departure
          timetable lists trains that are departing from the referenceStation.
          Arrival timetable lists trains that arrive at the referenceStation.
        type: string
        example: DEPARTURE
        enum:
          - DEPARTURE
          - ARRIVAL
      segments:
        type: array
        items:
          $ref: '#/definitions/Segment'
  StopStation:
    type: object
    required:
      - station
    properties:
      station:
        $ref: '#/definitions/Location'
      arrivalDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local arrival date-time in format YYYY-MM-DDTHH:MM:SS.'
      arrivalTrack:
        description: Arrival platform number.
        type: string
      departureDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local departure date-time in format YYYY-MM-DDTHH:MM:SS.'
      departureTrack:
        description: Departure platform number.
        type: string
      borderPoint:
        description: >-
          Flag to know if the station is a border point. If true the station is
          a border point. If false the station is not a border point. If not
          returned the information is unkown.
        type: boolean
        example: true
      realArrivalDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local arrival date-time in format YYYY-MM-DDTHH:MM:SS.'
      realArrivalTrack:
        description: Real time information about the arrival platform number.
        type: string
      realDepartureDateTime:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        description: 'Local departure date-time in format YYYY-MM-DDTHH:MM:SS.'
      realDepartureTrack:
        type: string
        description: Real time information about the departure platform number.
      entrain:
        type: boolean
        example: true
        default: true
        description: 'If true, travelers can get in the train at this stop station.'
      detrain:
        type: boolean
        example: true
        default: true
        description: 'If true, travelers can get out of the train at this stop station.'
  Tax:
    type: object
    allOf:
      - $ref: '#/definitions/Money'
      - type: object
        title: taxAdditionalData
        properties:
          originalAmountAndCurrency:
            $ref: '#/definitions/Money'
          conversionRate:
            type: string
            description: >-
              Conversion rate used during booking phase to convert from amounts
              in provider's currency to amounts in client's currency.
            pattern: '^[-]?([0-9]+)([.][0-9]+)?$'
          code:
            type: string
          nature:
            type: string
            example: VAT
          percentage:
            type: string
            example: '10'
          included:
            type: boolean
            example: true
          description:
            type: string
            example: Value-added tax.
  Ticket:
    type: object
    description: >-
      The ticket is the proof of representation of the contract of carriage
      between the contractual carrier and the traveler.
    required:
      - id
      - status
      - issuance
      - distributorTicketNumber
      - providerTicketNumber
    properties:
      id:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      status:
        $ref: '#/definitions/TicketStatus'
      orderItemId:
        $ref: '#/definitions/Idhref'
      admissionIds:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Idhref'
      ancillaryIds:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Idhref'
      accommodationIds:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Idhref'
      actorIds:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Idhref'
      cardAndPasses:
        type: array
        items:
          $ref: '#/definitions/CardAndPass'
      fees:
        description: Used when a ticket is created for a fee or a collection of fees.
        type: array
        items:
          $ref: '#/definitions/Idhref'
        uniqueItems: true
      distributorTicketNumber:
        type: string
      distributorCode:
        type: string
        pattern: '^[A-Z]{3}$'
      providerTicketNumber:
        type: string
      groupReference:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      relatedTickets:
        description: >-
          Describes the relationship between the current ticket with other
          tickets. For instance if the current Status of the ticket is
          Exchanged, the related ticket refers to the new ticket created.
        type: array
        items:
          type: object
          title: ticketRelationship
          properties:
            ticketIds:
              type: array
              items:
                $ref: '#/definitions/Idhref'
            relationship:
              type: string
              example: RETURN_FARE
              description: >-
                Describes how tickets are related to each other.
                EXCHANGE_NEW_TICKET qualifies the id of the ticket that has
                replaced the current one. EXCHANGE_OLD_TICKET qualifies the id
                of the ticket that has been exchanged against the current one.
                RETURN_FARE qualifies the id of a ticket linked the current one
                by a return fare. ADMISSION is used to indicates ticket to prove
                the right to access the train. ACCOMMODATION is used for ticket
                that proves the right to sit on the train.
              enum:
                - EXCHANGE_NEW_TICKET
                - EXCHANGE_OLD_TICKET
                - RETURN_FARE
                - ADMISSION
                - ACCOMMODATION
      issuance:
        type: object
        title: issuance
        required:
          - price
        properties:
          price:
            $ref: '#/definitions/Price'
          issuanceDateTime:
            description: Ticket creation Datetime. It refers to travel agency local time.
            type: string
            pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
            example: '2017-01-17T08:32:00'
          ticketingOption:
            type: object
            title: ticketingOption
            properties:
              ticketType:
                description: >-
                  Type of ticket issued. Codes (codelist TTY) for the ticket
                  type.
                example: '001'
                type: string
              pickUpStation:
                $ref: '#/definitions/Location'
                description: >-
                  In case the user selects pick up at station as distrubution
                  type.
          documents:
            description: List of documents related to a ticket.
            type: array
            items:
              title: document
              type: object
              required:
                - documentFormat
              properties:
                documentLink:
                  type: string
                  description: Left empty in case document is not generated.
                  format: url
                documentFormat:
                  $ref: '#/definitions/DocumentFormat'
      refund:
        type: object
        title: refund
        required:
          - refundedAmount
        properties:
          refundedAmount:
            $ref: '#/definitions/Price'
          penalty:
            $ref: '#/definitions/Price'
          refundDate:
            type: string
            pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
      void:
        type: object
        title: void
        required:
          - voidDate
        properties:
          voidDate:
            type: string
            pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
      exchange:
        type: object
        title: exchange
        required:
          - resultingAmount
        properties:
          resultingAmount:
            $ref: '#/definitions/Price'
            description: Amount which has been refunded as part of the exchange operation.
          penalty:
            $ref: '#/definitions/Price'
          exchangeDate:
            type: string
            pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
          newTicketIds:
            $ref: '#/definitions/Idhref'
      release:
        type: object
        title: release
        required:
          - releaseDate
        properties:
          releaseDate:
            type: string
            pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
          refundableAmount:
            $ref: '#/definitions/Price'
          penalty:
            $ref: '#/definitions/Price'
          endOfProbationDate:
            type: string
            pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
      afterSalesConditions:
        type: object
        title: afterSalesConditions
        description: Exchange and refund conditions.
        properties:
          requiredTicketIds:
            type: array
            uniqueItems: true
            items:
              type: string
            description: List of other ticketIds which must be selected together with.
          exchangeConditions:
            type: object
            title: exchangeConditions
            description: Exchange conditions.
            properties:
              isExchangeable:
                type: boolean
                readOnly: true
                example: true
                description: Indicates if ticket is exchangeable.
              reason:
                type: string
                description: >-
                  Indicates the reason why a ticket is not exchangeable.
                  CHECKED_IN indicates that the ticket has been checked in for
                  use in the train. FARE_CONDITIONS indicates that fare
                  conditions do not allow a voluntary refund.
                  PENDING_OTHER_ACTION indicates that another action is required
                  first, for instance if other tickets had been released, it
                  might be required to refund them first.
                example: CHECKED_IN
                enum:
                  - CHECKED_IN
                  - FARE_CONDITIONS
                  - PENDING_OTHER_ACTION
              penalty:
                $ref: '#/definitions/Money'
                description: Penalty that should be paid is case of exchange.
              endDateTime:
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                description: >-
                  Exchange conditions end validity (Date-time in format
                  YYYY-MM-DDTHH:MM:SS).
          refundConditions:
            type: object
            title: refundConditions
            description: Refund conditions.
            properties:
              isRefundable:
                type: boolean
                readOnly: true
                example: true
                description: >-
                  Indicates if ticket is refundable. The refunded amount is
                  located between 0 and up to the full ticket price.
              reason:
                type: string
                description: >-
                  Indicates the reason why a ticket is not refundable.
                  CHECKED_IN indicates that the ticket has been checked in for
                  use in the train. FARE_CONDITIONS indicates that fare
                  conditions do not allow a voluntary refund.
                  PENDING_OTHER_ACTION indicates that another action is required
                  first, for instance if other tickets had been released, it
                  might be required to refund them first.
                example: CHECKED_IN
                enum:
                  - CHECKED_IN
                  - FARE_CONDITIONS
                  - PENDING_OTHER_ACTION
              penalty:
                $ref: '#/definitions/Money'
                description: Refund penalty.
              endDateTime:
                type: string
                pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
                description: >-
                  Refund conditions end validity (Date-time in format
                  YYYY-MM-DDTHH:MM:SSZ)
          isReleasable:
            type: boolean
            readOnly: true
            example: true
  TicketInfo:
    type: object
    description: Contains the ticket with minimum information.
    required:
      - id
      - distributorTicketNumber
    properties:
      id:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      status:
        $ref: '#/definitions/TicketStatus'
      distributorTicketNumber:
        type: string
  TicketingOptions:
    type: object
    description: This section allows the selection of the ticketing options for the order.
    required:
      - ticketType
      - selected
    properties:
      ticketType:
        type: string
        description: Codes (codelist TTY) for the ticket type.
        example: '001'
      selected:
        description: >-
          Flag to specify which ticketing option is selected. Only one option is
          allowed to be selected.
        type: boolean
        default: false
        example: true
      requiredInfo:
        description: >-
          Displays the set of required information to be provided for each
          actor.
        type: array
        uniqueItems: true
        readOnly: true
        items:
          title: requiredInfo
          properties:
            actorId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            requiredActorData:
              type: string
              description: >-
                Specifies the required information (date of birth, name, etc.)
                to issue and deliver the ticket. Properties are represented
                using the model class.attribute. To identify the collection of
                required info, following convention is used: || = OR, && = AND.
                The presence of loyalty cards is taken into account to define
                required data.
              example: >-
                actor.lastname && actor.firstname &&
                (actor.contacts.emailAddresses || actor.contacts.phoneNumbers)
      fee:
        description: Ticket delivery fee.
        $ref: '#/definitions/Fee'
  TicketStatus:
    type: string
    example: TICKETED
    description: >-
      Ticketed means the booking has been confirmed and paid. Released means
      that the ticket has been ticketed but the buyer, for any reason, prefers
      to cancel the reservation, release the seat. Voided means that a ticket
      has been cancelled, still the reservation is booked. Refunded status means
      the payer has asked to be refunded and the operation has been done
      successfully. Exchanged means that the current ticket has been replaced by
      another. Issued at kiosk means that the ticket has been obtained from a
      station sell machine. Refunded without release means refund operation has
      been performed on the current ticket but linked seats are not released for
      other possible bookers. Released with probation means that seat has been
      released and it is proved the ticket has not been consumed.
    enum:
      - RELEASED
      - TICKETED
      - VOIDED
      - REFUNDED
      - EXCHANGED
      - ISSUED_AT_KIOSK
      - REFUNDED_WITHOUT_RELEASE
      - RELEASED_WITH_PROBATION
  TicketTimeLimit:
    type: object
    properties:
      effectiveTicketTimeLimit:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        readOnly: true
        description: >-
          Effective ticket time limit used for cancelling. If order is not
          ticketed before this datetime, the whole order will be cancelled.
          Default value is computed by selecting the minimum among distributor
          and providers ticket time limit. User is able to override such value.
          (Date-time in format YYYY-MM-DDTHH:MM:SS).
      overridden:
        type: boolean
        description: >-
          Indicates whether the effective ticket time limit has been overridden
          previously.
        example: true
      overrideAllowed:
        type: boolean
        readOnly: true
        description: >-
          Indicates whether overriding the effective ticket time limit is
          allowed.
        example: false
      earliestProviderTimeLimit:
        type: string
        pattern: '(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)'
        example: '2017-01-17T08:32:00'
        readOnly: true
        description: >-
          Corresponds to the earliest among providers ticket time limit
          calculated by the system. (Date-time in format YYYY-MM-DDTHH:MM:SS).
  TotalPriceInCart:
    type: object
    maxProperties: 1
    properties:
      totalPrice:
        $ref: '#/definitions/Money'
      totalRefundedAmount:
        $ref: '#/definitions/Money'
        description: Amount for the operation in case it results into a monetary refund.
      totalAdditionalAmount:
        $ref: '#/definitions/Money'
        description: >-
          Amount for the operation in case it results into an additional amount
          to pay.
  TravelClassLabel:
    type: object
    description: Carrier specific travel class label.
    properties:
      carrierCode:
        description: Code of the carrier (codelist CRC).
        type: string
        example: SNF
        minLength: 3
        maxLength: 3
      label:
        description: >-
          Non-multilingual field containing the carrier specific travel class
          label.
        type: string
        example: Business Premier
  Traveler:
    type: object
    allOf:
      - $ref: '#/definitions/Name'
      - type: object
        title: travelerAdditionalData
        properties:
          id:
            type: string
            format: uuid
            description: >-
              Traveler identifier. Automatically generated when the traveler is
              added at shopping time and kept through the order.
            readOnly: true
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          dateOfBirth:
            type: string
            format: date
            example: '1987-07-25'
            description: >-
              Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), e.g.
              2002-07-25: YYYY-MM-DD.
          reductions:
            $ref: '#/definitions/Reduction'
          contacts:
            $ref: '#/definitions/Contact'
            description: 'Not used in Shopping flow but after in Cart, Order flow, etc.'
          loyaltyCards:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/LoyaltyCard'
            description: >-
              This field is modifiable only in cart, except in case of Thalys
              Loyalty Card. Not used in Shopping flow but after in Cart, Order
              flow, etc.
          retrievedFromProfile:
            type: boolean
            example: true
            default: false
            description: >-
              True when the traveler information has been retrieved from a
              profile. False when it has been provided by the user.
  TravelerFromOrder:
    type: object
    title: travelerFromOrder
    required:
      - refActorId
    properties:
      refActorId:
        type: string
        format: uuid
        description: Traveler identifier. ActorId(s) retrieved from the order.
      reductions:
        description: >-
          Additional reduction(s) can be provided: they are added to the
          existing ones.
        $ref: '#/definitions/Reduction'
  TravelerInInput:
    type: object
    title: travelerInInput
    description: >-
      Traveler(s) information provided in input. It can either be regular
      travelers or travelers from a previous order.
    maxProperties: 1
    properties:
      travelers:
        type: array
        items:
          $ref: '#/definitions/AnonymousTraveler'
      actorsFromOrder:
        description: >-
          Traveler(s) information retrieved from an existing order - for round
          trip only. If nothing specified, all the travelers in the order are
          taken.
        type: object
        title: actorsFromOrder
        required:
          - orderId
        properties:
          orderId:
            description: >-
              Reference id of an existing order used to retrieve the traveler(s)
              information.
            type: string
            format: uuid
          refActors:
            description: Traveler(s) retrieved from the order.
            type: array
            items:
              $ref: '#/definitions/TravelerFromOrder'
  TravelOffer:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      itinerary:
        $ref: '#/definitions/Itinerary'
      offers:
        type: array
        items:
          $ref: '#/definitions/OfferProposed'
      segmentsWithoutProducts:
        type: array
        description: >-
          Segments for which no admission, accommodation, ancillary are
          returned.
        uniqueItems: true
        items:
          title: segmentWithoutProduct
          type: object
          properties:
            segmentId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            departureStation:
              $ref: '#/definitions/Location'
            arrivalStation:
              $ref: '#/definitions/Location'
            bookableStatus:
              description: >-
                Code (codelist BST) for the bookable status. This will only be
                returned when a travel offers search is performed.
              type: string
              example: PARTIALLY_BOOKABLE
            transportType:
              description: Code (codelist TCS) for the transport type.
              type: string
              example: '002'
  TravelOfferBasic:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      itinerary:
        $ref: '#/definitions/ItineraryBasic'
      offers:
        type: array
        items:
          $ref: '#/definitions/OfferBasic'
      segmentsWithoutProducts:
        type: array
        description: >-
          Segments for which no admission, accommodation, ancillary are
          returned.
        uniqueItems: true
        items:
          title: segmentWithoutProduct
          type: object
          properties:
            segmentId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            departureStation:
              $ref: '#/definitions/Location'
            arrivalStation:
              $ref: '#/definitions/Location'
            bookableStatus:
              description: >-
                Code (codelist BST) for the bookable status. This will only be
                returned when a travel offers search is performed.
              type: string
              example: PARTIALLY_BOOKABLE
            transportType:
              description: Code (codelist TCS) for the transport type.
              type: string
              example: '002'
  TravelOffersSearch:
    type: object
    description: >-
      A travel offer search contains the travel search body and a collection of
      travel offers.
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
        description: Automatically generated.
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      timeToLive:
        type: string
        example: PT20M
        description: >-
          Time to live in ISO 8601 / RFC 3339
          (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
      criteria:
        $ref: '#/definitions/TravelSearchBody'
      travelOffers:
        type: array
        items:
          $ref: '#/definitions/TravelOfferBasic'
      timeRange:
        description: >-
          Time range of the itineraries in response. In case of search by
          departure dateTime: - for the first request, the earliest and latest
          departure time (t1 and t2) are the ones returned by Hafas prior any
          filtering. - in case of forward scrolling (scrollLater), the earliest
          departure time is the latest date time returned in the previous
          request (t2) and the latest date time is the last date time returned
          by Hafas prior any filtering (t3). (opposite for backward scrolling)
          In case of search by arrival dateTime, the logic is the same but
          reversed (i.e. the range is about the earliest and latest arrival date
          time).
        $ref: '#/definitions/Period'
      scrollToken:
        type: object
        title: scrollToken
        properties:
          earlier:
            description: Token for earlier results.
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
          later:
            description: Token for later results.
            type: string
            format: uuid
            example: 71def814-0a90-4271-bc56-954ffa43f5ff
  TravelOffersSearchCommonOptions:
    type: object
    required:
      - distributor
    properties:
      accommodationOnly:
        type: boolean
        description: >-
          If true, search for accommodations standalone; in this case, the
          following input parameters are disregarded: productOptions (but
          travelClass) and withBike.
        default: false
        example: false
      distributor:
        type: string
        description: Requested distributor code.
        example: BNE
      language:
        type: string
        description: >-
          Requested language (format ISO 639-1:2002
          https://www.iso.org/iso-639-language-codes.html).
        minLength: 2
        maxLength: 2
        pattern: '^[a-zA-Z]{2}$'
        example: EN
      currency:
        type: string
        description: >-
          Wished currency (format ISO 4217
          https://www.iso.org/iso-4217-currency-codes.html).
        minLength: 3
        maxLength: 3
        pattern: '^[a-zA-Z]{3}$'
        example: EUR
      travelersInInput:
        $ref: '#/definitions/TravelerInInput'
      productOptions:
        $ref: '#/definitions/ProductOptions'
  TravelSearchBody:
    type: object
    description: >-
      Input parameters for the search for travel offers or accommodations
      standalone. This search can be performed EITHER by providing a set of
      search criteria (fare-driven flow) OR itineray ids in input
      (schedule-driven flow).
    maxProperties: 1
    properties:
      searchCriteria:
        $ref: '#/definitions/SearchCriteria'
      itinerariesInInput:
        $ref: '#/definitions/ItinerariesInInput'
  Vehicle:
    type: object
    description: >-
      Describes the transportation means e.g. a Train, a Bus, etc. It may be
      further characterized; in the case of a Train, it contains the Train
      Number, Code etc.
    properties:
      vehicleTypes:
        type: array
        description: >-
          Code (codelist TVT) for the generic transport service returned, e.g.
          High speed, Intercities, Night and so on.
        items:
          title: vehicleType
          type: string
          example: '005'
      category:
        description: Code (codelist TVC) for the vehicle category.
        type: string
        example: TGV
      code:
        description: Equipment code.
        type: string
        example: TGO
      number:
        type: string
        example: '1253'
      description:
        type: string
        example: TGV Duplex
      displayName:
        type: string
        example: TGV 1253
  Voucher:
    type: object
    allOf:
      - $ref: '#/definitions/Money'
      - type: object
        title: voucherAdditionalData
        description: >-
          Vouchers are loyalty method of payment that have a limited number of
          uses (one generally). It can be used to track loyalty cards or green
          point as well.
        required:
          - valid
        properties:
          identifier:
            type: string
            description: >-
              It is the series code number in case of vouchers and the member
              number in case of loyalty cards.
            minLength: 1
            maxLength: 99
          promoCode:
            type: string
            description: Code used to identify a specific campaign.
            example: CHRISTMAS123
            minLength: 1
            maxLength: 30
          valid:
            type: boolean
            example: true
            description: Used to identify the validity of the voucher.
          invalidReasonCode:
            type: string
            description: >-
              Code (codelist VER) for voucher invalid reason code. Can be filled
              only when valid is equal to false. Each code represents the reason
              why the voucher cannot be used, for instance validity period
              expired.
            example: '001'
            readOnly: true
          vendor:
            type: string
            description: Identifies the brand or the code of the Loyalty provider.
            example: Thello
            minLength: 1
            maxLength: 30
          program:
            type: string
            description: Used to identify if a Vendor offers different sub-programs/brands.
            minLength: 1
            maxLength: 30
          percentage:
            type: string
            description: The percentage of reduction entitled to the user.
          validity:
            $ref: '#/definitions/Period'
  AccommodationBookedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: accommodationBookedData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/AccommodationBooked'
  AccommodationReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: accommodationData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Accommodation'
  AccommodationsBookedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: accommodationsBookedData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/AccommodationBooked'
  AccommodationsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: accommodationData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/Accommodation'
  ActorReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: actorData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Actor'
  ActorsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: actorsData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/Actor'
  AdmissionReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: admissionData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Admission'
  AdmissionsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: admissionData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Admission'
  AncillaryBookedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ancillaryBookedData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/AncillaryBooked'
  AncillarySearchReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ancillarySearchData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/AncillarySearch'
  AncillarySelectedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ancillarySelectedData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/AncillarySelected'
  AncillaryIdRequest:
    type: object
    required:
      - ancillaryId
      - actorIds
    properties:
      ancillaryId:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      quantity:
        type: integer
        description: Quantity per requested actor.
        minimum: 0
      actorIds:
        type: array
        description: A list of travelers on which the ancillary should be applied.
        uniqueItems: true
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
        minItems: 1
  AncillariesBookedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ancillariesBookedData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/AncillaryBooked'
  AncillariesSelectedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ancillariesSelectedData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/AncillarySelected'
  CalendarOverviewReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: calendarSearchData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/CalendarSearch'
  CardAndPassSearchReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: cardAndPassSearchData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/CardAndPassSearch'
  CartReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: cartData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Cart'
  CommonReply:
    type: object
    properties:
      warnings:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/Error'
  DayOverviewReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: dayOverviewSearchData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/DayOverviewSearch'
  DocumentReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: documentData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Document'
  DocumentsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: documentsData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/Document'
            uniqueItems: true
  Error:
    type: object
    properties:
      status:
        description: The HTTP status code applicable to this error.
        type: integer
        example: 400
      code:
        description: An application-specific error code.
        type: string
        example: '14453'
      title:
        description: A short summary of the error.
        type: string
      detail:
        description: Explanation of the error.
        type: string
      source:
        description: The source of the error.
        type: object
        title: source
        properties:
          pointer:
            description: >-
              A JSON Pointer [RFC6901] to the associated entity in the request
              document [e.g. /data for a primary data object, or
              /data/attributes/title for a specific attribute]
              (https://tools.ietf.org/html/rfc6901).
            type: string
          parameter:
            description: A string indicating which URI query parameter caused the error.
            type: string
          example:
            description: An example value related to pointer or parameter.
            type: string
  ErrorReply:
    type: object
    properties:
      errors:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/Error'
      warnings:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/Error'
  ExchangeSelectionReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: exchangeSelectionData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/ExchangeSelection'
  ExchangeTravelOfferReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: exchangeTravelOfferData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/ExchangeTravelOffer'
  ExchangeTravelSearchReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: exchangeTravelOffersSearchData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/ExchangeTravelOffersSearch'
  FeesReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: feeData
        required:
          - data
        properties:
          data:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/Fee'
  FinancialTransactionsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: financialTransactionsData
        required:
          - data
        properties:
          data:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/FinancialTransaction'
  Idhref:
    type: object
    properties:
      id:
        type: string
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      href:
        type: string
        format: url
      methods:
        type: array
        description: List of allowed methods.
        uniqueItems: true
        items:
          type: string
          example: GET
          enum:
            - POST
            - GET
            - PUT
            - DELETE
  ItineraryReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: itineraryData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Itinerary'
  ItinerarySearchReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: itinerarySearchData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/ItinerarySearch'
  OfferIdOptionalIds:
    type: object
    properties:
      offerId:
        type: string
        format: uuid
        example: 71def814-0a90-4271-bc56-954ffa43f5ff
      accommodationIds:
        type: array
        description: Used to add optional accommodations simultaneously.
        uniqueItems: true
        items:
          type: string
          format: uuid
          example: 71def814-0a90-4271-bc56-954ffa43f5ff
        minItems: 1
      ancillaryIds:
        type: array
        description: >-
          Used to add optional ancillaries simultaneously, or to create a new
          selected-offer with only ancillaries.
        uniqueItems: true
        minItems: 1
        items:
          type: object
          required:
            - ancillaryId
          properties:
            ancillaryId:
              type: string
              format: uuid
              example: 71def814-0a90-4271-bc56-954ffa43f5ff
            quantity:
              type: integer
              description: Quantity per requested traveler.
              minimum: 0
            travelerIds:
              type: array
              description: A list of travelers on which the ancillary should be applied.
              uniqueItems: true
              items:
                type: string
                format: uuid
                example: 71def814-0a90-4271-bc56-954ffa43f5ff
              minItems: 1
  OfferReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: offerProposedData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/OfferProposed'
  OfferSelectedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: offerSelectedData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/OfferSelected'
  OffersSelectedReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: offersSelectedData
        required:
          - data
        properties:
          data:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/OfferSelected'
  OrderItemReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: orderItemData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/OrderItem'
  OrderItemsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: orderItemsData
        required:
          - data
        properties:
          data:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/OrderItem'
  OrderReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: orderData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Order'
          included:
            type: object
            properties:
              tickets:
                type: array
                uniqueItems: true
                items:
                  $ref: '#/definitions/Ticket'
              documents:
                type: array
                uniqueItems: true
                items:
                  $ref: '#/definitions/Document'
  OrderPreviewsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: orderPreviewData
        required:
          - data
        properties:
          data:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/OrderPreview'
          meta:
            type: object
            properties:
              count:
                description: Total number of results.
                type: integer
              'page[offset]':
                description: Offset of the current page.
                type: integer
  PaymentOptionReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: paymentOptionData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/PaymentOption'
  PaymentOptionsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: paymentOptionsData
        required:
          - data
        properties:
          data:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/PaymentOption'
  PaymentTransactionReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: paymentTransactionData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/PaymentTransaction'
  RecipientEmailsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: recipientEmailsData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/RecipientEmails'
  RefundReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: refundData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Refund'
  RefundConditionsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: refundConditionsData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/RefundConditions'
  StationTimetablesReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: stationTimetableData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/StationTimetable'
  TicketingOptionsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ticketingOptionsData
        required:
          - data
        properties:
          data:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/TicketingOptions'
  TicketReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ticketData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Ticket'
  TicketsReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ticketsData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/Ticket'
            uniqueItems: true
  TicketTimeLimitReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: ticketTimeLimitData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/TicketTimeLimit'
  TravelerReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: travelerData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/Traveler'
  TravelersReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: travelersData
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/Traveler'
  TravelOfferReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: travelOfferData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/TravelOffer'
  TravelSearchReply:
    type: object
    allOf:
      - $ref: '#/definitions/CommonReply'
      - type: object
        title: travelOffersSearchData
        required:
          - data
        properties:
          data:
            $ref: '#/definitions/TravelOffersSearch'
responses:
  '400':
    description: Bad Request.
    schema:
      $ref: '#/definitions/ErrorReply'
  '401':
    description: Unauthorized.
    schema:
      $ref: '#/definitions/ErrorReply'
  '404':
    description: Not Found.
    schema:
      $ref: '#/definitions/ErrorReply'
  '405':
    description: Method Not Allowed.
    schema:
      $ref: '#/definitions/ErrorReply'
  '410':
    description: Gone.
    schema:
      $ref: '#/definitions/ErrorReply'
  '500':
    description: Unexpected Error.
    schema:
      $ref: '#/definitions/ErrorReply'
  '502':
    description: Bad Gateway.
    schema:
      $ref: '#/definitions/ErrorReply'
  '504':
    description: Gateway Timeout.
    schema:
      $ref: '#/definitions/ErrorReply'
  default:
    description: Unexpected error
    schema:
      $ref: '#/definitions/ErrorReply'

